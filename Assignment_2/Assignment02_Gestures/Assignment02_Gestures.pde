// TODO: 
// Check if CP5 is compatible with the proposed architecture [NOPE]
// Make toolbox state bool-list with feedback module [DONE] 
//  |- Shortcuts [DONE] 
//  '- Gestures [WIP]
// 
// Make an editor [DONE]  


// For gesture
import de.voidplus.dollar.*;
OneDollar one;

long UUID;
long totalNoOfClicks;
long totalGesturesDrawn;
int shapesDrawnLast;


int appState = 0;
// App states 
// 0 - Start screen 
// 1 - Tutorial - Shortcut - free-form line 

int editorShapeIndex = -1;
String[] shapeOptions = {"free_form_line", "straight_line", "rectangle", "oval"};
String[] shapeOptionDisplays = {"Free-form line", "Straight line", "Rectangle", "Oval"};

int editorColourIndex = 0;
int[] colourOptions = {color(53, 53, 77),    // black
                     color(239, 93, 93),     // red 
                     color(117, 208, 126),   // green
                     color(93, 169, 239)};   // blue
                     
int[] colourOptionsAlpha = {color(53, 53, 77, 102),    // black
                     color(239, 93, 93, 102),          // red 
                     color(117, 208, 126, 102),        // green
                     color(93, 169, 239, 102)};        // blue
                     
String[] colourOptionDisplays = { "Black", "Red", "Green", "Blue" };
                     
int editorWeightIndex = 1;
int[] weightOptions = {1,  // thin
                       4,  // medium
                       8}; // thick
String[] weightOptionDisplays = {"Thin", "Medium", "Thick"};


// Already drawn list of shapes
ArrayList<PShape> drawnShapeList = new ArrayList<PShape>();

// Undo helper function
void undoLastDrawnShape(){
  // Gauard clause
    if(drawnShapeList.size() > 0){
         drawnShapeList.remove(drawnShapeList.size() - 1);
    }
}
// Flush all shapes
void clearAllDrawnShapes(){
  drawnShapeList.clear();
}


// Present shape being drawn (not necessarily added)
int strokeColour = color(0);  // Debug values 
int strokeWeight = 56;        // Debug values
int defaultShapeFillColour = color(255, 255, 255, 0); // Default unfilled shapes
PShape currentDrawnShape;

PShape currentRectangleShape;
PVector rectangleStartPoint = new PVector(0,0); // Debug values

PShape currentOvalShape;
PVector ovalStartPoint = new PVector(0,0); // Debug values



int PrimaryButtonHeight = 36;
int TextInputHeight = 36;
int defaultBorderWeight = 1;

// -Colours 
int screenBgColour = color(244, 245, 251);

int buttonPrimaryDefaultBgColour = color(93, 95, 231);
int buttonPrimaryHoverBgColour = color(125, 127, 242);
int buttonPrimaryPressedBgColour = color(65, 67, 236);
int buttonPrimaryInactiveBgColour = color(190, 191, 249);

int textFieldBgColour = color(235, 235, 235);

int textDefaultColour = color(0);
int textInactiveColour = color(148);
int textButtonPrimaryLabelColour = color(255);

int drawingAreaBgColour = color(255);
int defaultBorderColour = color(188);

// -Fonts
PFont headerPFont;
PFont captionPFont;
PFont defaultCopyPFont;
PFont boldCopyPFont;
PFont buttonLabelPFont;
PFont currentSettingsLabelPFont;

// Images
PImage checkCircleGreenImage;

PImage gestureBlackColourSelectImage;
PImage gestureRedColourSelectImage;
PImage gestureGreenColourSelectImage;
PImage gestureBlueColourSelectImage;

PImage gestureThinWeightSelectImage;
PImage gestureMediumWeightSelectImage;
PImage gestureThickWeightSelectImage;


// Screenwise variables 
// - Start 
int buttonNextTutorialShortcutFreeformLineBgColour = buttonPrimaryDefaultBgColour;

// - Tutorial: Free-form with Shortcut
boolean tutFreeformSelectedShortcut = false;
boolean tutFreeformDrawnShortcut = false;
int buttonNextTutorialShortcutStraightLineBgColour = buttonPrimaryInactiveBgColour;
boolean buttonNextTutorialShortcutStraightLineActivated = false;

// - Tutorial: Straight line with Shortcut
boolean tutStraightSelectedShortcut = false;
boolean tutStraightDrawnShortcut = false;
int buttonNextTutorialShortcutRectangleBgColour = buttonPrimaryInactiveBgColour;
boolean buttonNextTutorialShortcutRectangleActivated = false;

// - Tutorial: Rectangle with Shortcut
boolean tutRectangleSelectedShortcut = false;
boolean tutRectangleDrawnShortcut = false;
int buttonNextTutorialShortcutOvalBgColour = buttonPrimaryInactiveBgColour;
boolean buttonNextTutorialShortcutOvalActivated = false;

// - Tutorial: Oval with Shortcut
boolean tutOvalSelectedShortcut = false;
boolean tutOvalDrawnShortcut = false;
int buttonNextTutorialShortcutColourBgColour = buttonPrimaryInactiveBgColour;
boolean buttonNextTutorialShortcutColourActivated = false;

// - Tutorial: Colours with Shortcut
boolean tutColour1SelectedShortcut = false;
boolean tutColour2SelectedShortcut = false;
boolean tutColour3SelectedShortcut = false; 
boolean tutColour4SelectedShortcut = false; 
boolean tutAllColoursSelectedShortcut = false;

boolean tutColour1DrawnShortcut = false;
boolean tutColour2DrawnShortcut = false;
boolean tutColour3DrawnShortcut = false; 
boolean tutColour4DrawnShortcut = false; 
boolean tutDrawnWithAllColoursShortcut = false;
int buttonNextTutorialShortcutWeightBgColour = buttonPrimaryInactiveBgColour;
boolean buttonNextTutorialShortcutWeightActivated = false;

// - Tutorial: Weights with Shortcut
boolean tutWeight1SelectedShortcut = false;
boolean tutWeight2SelectedShortcut = false;
boolean tutWeight3SelectedShortcut = false; 
boolean tutAllWeightsSelectedShortcut = false;

boolean tutWeight1DrawnShortcut = false;
boolean tutWeight2DrawnShortcut = false;
boolean tutWeight3DrawnShortcut = false; 
boolean tutDrawnWithAllWeightsShortcut = false;
int buttonNextTutorialShortcutUndoBgColour = buttonPrimaryInactiveBgColour;
boolean buttonNextTutorialShortcutUndoActivated = false;

// Tutorial: Undo 
boolean tut3ShapesDrawnShortcut = false;
boolean tut3DeletedShortcut = false;
int buttonNextTutorialShortcutReviewBgColour = buttonPrimaryInactiveBgColour;
boolean buttonNextTutorialShortcutReviewActivated = false;

// - Review 
int buttonNextTask1ShortcutBgColour = buttonPrimaryDefaultBgColour;

// - Drawing Task 1
int buttonNextTask2ShortcutBgColour = buttonPrimaryDefaultBgColour;

// - Drawing Task 2
int buttonNextConclusionShortcutBgColour = buttonPrimaryDefaultBgColour;

// - Conclusion
int buttonExitBgColour = buttonPrimaryDefaultBgColour;


void setup() {
  size(800, 450);
  
  // Book-keeping
  UUID = System.currentTimeMillis();
  println("UUID: Gesture-", UUID);
  
  totalNoOfClicks = 0;
  shapesDrawnLast = 0;
  totalGesturesDrawn = 0;
  
  // To keep drawing interaction consistent 
  rectMode(CORNERS);
  // To keep drawing interaction natural
  ellipseMode(RADIUS);
  
  // -Fonts
  headerPFont = createFont("Arial Bold", 26);
  captionPFont = createFont("Arial", 16);
  defaultCopyPFont = createFont("Arial", 18);
  boldCopyPFont = createFont("Arial Bold", 18);
  buttonLabelPFont = createFont("Arial", 16);
  currentSettingsLabelPFont = createFont("Arial", 14);
  
  // -Images
  checkCircleGreenImage = loadImage("check_circle_green.png");
  
  gestureBlackColourSelectImage = loadImage("black_gesture_inline.png");
  gestureRedColourSelectImage = loadImage("red_gesture_inline.png");
  gestureGreenColourSelectImage = loadImage("green_gesture_inline.png");
  gestureBlueColourSelectImage = loadImage("blue_gesture_inline.png");
  
  gestureThinWeightSelectImage = loadImage("thin_gesture_inline.png");
  gestureMediumWeightSelectImage = loadImage("medium_gesture_inline.png");
  gestureThickWeightSelectImage = loadImage("thick_gesture_inline.png");
  
  
  // 1. Create instance of class OneDollar:
  one = new OneDollar(this);
  one.setMaxTime(2000).enableMaxTime();
  
  println(one);                  // Print all the settings
  // one.setVerbose(true);          // Activate console verbose
  one.disableAutoCheck();
  
  // 2. Add gestures (templates):
  
  // Keeping shape gestures symmetrical for ease-of-use
  //-------------------------------------------
  // Less-than sign (<)
  one.learn("undo1", new int[] {291,150,287,150,282,153,274,157,263,163,252,168,236,175,221,180,205,188,179,198,155,208,133,216,113,226,95,233,83,239,71,245,60,250,52,253,49,256,47,257,46,257,47,258,49,259,50,259,53,259,54,259,55,260,56,260,59,260,63,260,69,260,79,260,91,262,110,266,129,268,149,271,171,277,191,283,210,287,227,291,241,295,257,296,279,302,299,304,320,308,336,314,347,317,354,320,361,323,363,324,365,325,366,325});
  one.learn("undo2", new int[] {291,150,287,150,282,153,274,157,263,163,252,168,236,175,221,180,205,188,179,198,155,208,133,216,113,226,95,233,83,239,71,245,60,250,52,253,49,256,47,257,46,257,47,258,49,259,50,259,53,259,54,259,55,260,56,260,59,260,63,260,69,260,79,260,91,262,110,266,129,268,149,271,171,277,191,283,210,287,227,291,241,295,257,296,279,302,299,304,320,308,336,314,347,317,354,320,361,323,363,324,365,325,366,325});
  
  //-------------------------------------------
  // Straight-line (vertically down or up)
  one.learn("sl1", new int[] {234,163,234,173,233,186,231,201,226,215,224,229,221,245,219,264,219,283,219,305,219,325,219,344,219,366,219,390,219,412,219,432,219,444,219,453,224,460,227,463,228,464});
  one.learn("sl2", new int[] {228,464,227,463,224,460,219,453,219,444,219,432,219,412,219,390,219,366,219,344,219,325,219,305,219,283,219,264,221,245,224,229,226,215,231,201,233,186,234,173,234,163});
  
  one.learn("sl3", new int[] {265,114,264,117,262,123,259,129,258,139,255,152,251,168,243,190,237,210,229,234,217,258,207,284,197,306,189,326,181,343,174,360,168,375,163,389,158,401,155,410,152,417,152,420,151,422,151,424,152,426});
  one.learn("sl4", new int[] {152,426,151,424,151,422,152,420,152,417,155,410,158,401,163,389,168,375,174,360,181,343,189,326,197,306,207,284,217,258,229,234,237,210,243,190,251,168,255,152,258,139,259,129,262,123,264,117,265,114});
  
  one.learn("sl5", new int[] {184,149,189,165,197,184,207,206,215,232,227,270,245,306,263,338,285,370,309,400,329,422,343,440,348,447,349,449,349,450,348,451,347,451,346,451});
  one.learn("sl6", new int[] {346,451,347,451,348,451,349,450,349,449,348,447,343,440,329,422,309,400,285,370,263,338,245,306,227,270,215,232,207,206,197,184,189,165,184,149});
  
  //-------------------------------------------
  // Rectangle - squarish (from top-left corner)
  one.learn("rect1", new int[] {180,195,179,198,178,201,178,204,177,210,176,214,176,220,175,227,174,231,174,234,173,236,173,237,173,238,173,239,173,240,173,241,173,242,173,243,174,244,174,244,175,246,175,247,175,249,175,250,175,252,176,253,177,254,180,254,185,254,189,254,198,254,213,258,223,259,240,261,250,263,260,263,265,263,268,263,270,263,271,263,272,262,273,261,273,257,274,252,276,248,277,243,278,238,279,234,280,229,280,225,280,222,280,216,280,213,280,209,280,206,281,203,281,201,282,198,282,196,282,193,282,192,282,190,282,188,282,187,283,186,283,185,283,183,283,181,283,180,283,178,282,177,282,177,280,177,277,177,275,177,273,177,272,178,270,179,267,179,265,179,262,180,259,180,257,181,255,181,251,182,249,182,244,185,240,186,236,187,231,187,225,187,221,187,220,187,219,187,217,187,215,187,214,187,213,187,211,187,210,187,208,187,206,187,205,187,205,187,201,187,197,187,187,187,180,187,178,187,177,187});
  one.learn("rect2", new int[] {177,187,178,187,180,187,187,187,197,187,201,187,205,187,205,187,206,187,208,187,210,187,211,187,213,187,214,187,215,187,217,187,219,187,220,187,221,187,225,187,231,187,236,187,240,186,244,185,249,182,251,182,255,181,257,181,259,180,262,180,265,179,267,179,270,179,272,178,273,177,275,177,277,177,280,177,282,177,282,177,283,178,283,180,283,181,283,183,283,185,283,186,282,187,282,188,282,190,282,192,282,193,282,196,282,198,281,201,281,203,280,206,280,209,280,213,280,216,280,222,280,225,280,229,279,234,278,238,277,243,276,248,274,252,273,257,273,261,272,262,271,263,270,263,268,263,265,263,260,263,250,263,240,261,223,259,213,258,198,254,189,254,185,254,180,254,177,254,176,253,175,252,175,250,175,249,175,247,175,246,174,244,174,244,173,243,173,242,173,241,173,240,173,239,173,238,173,237,173,236,174,234,174,231,175,227,176,220,176,214,177,210,178,204,178,201,179,198,180,195});

  // Rectangle - wide (from top-left)
  one.learn("rect3", new int[] {92,237,92,239,92,241,92,242,91,244,91,246,91,247,90,248,90,249,90,251,90,252,90,253,90,254,90,256,90,259,90,260,89,262,89,263,88,264,88,265,88,266,88,267,88,268,88,269,88,270,88,271,88,272,88,273,88,274,88,275,88,276,89,277,90,277,92,277,95,277,96,276,98,276,99,275,101,275,102,275,105,274,108,274,112,272,116,272,119,271,123,270,127,269,135,269,143,268,154,268,166,268,179,268,189,268,195,268,200,268,203,268,205,268,207,268,208,268,210,268,214,268,219,268,228,268,238,268,249,268,258,268,263,268,267,269,272,269,274,269,277,270,280,270,283,270,286,270,289,270,291,270,293,270,295,270,297,270,299,270,301,271,304,272,307,273,310,273,312,274,314,274,316,274,318,274,321,274,323,274,327,274,329,274,331,274,332,274,333,274,335,274,337,274,338,274,340,274,341,274,342,274,343,274,344,274,345,273,346,273,347,273,349,273,351,273,352,273,353,272,353,271,353,271,353,269,354,266,354,264,354,262,354,259,354,258,354,257,354,255,355,253,355,251,355,250,355,248,355,247,355,246,356,245,356,244,356,243,355,241,355,240,355,239,355,237,355,236,355,234,355,233,355,232,355,230,355,229,355,228,355,227,354,225,354,223,354,222,353,221,353,220,353,220,352,220,351,220,350,219,349,219,348,219,347,219,346,219,345,220,344,220,342,220,338,221,335,222,332,222,329,222,326,222,324,223,322,223,320,223,318,224,313,224,308,224,301,225,295,225,289,225,285,226,282,226,280,226,277,227,272,228,267,228,263,229,259,229,257,229,256,229,255,230,254,230,252,230,249,230,244,230,234,230,225,230,217,230,211,230,206,230,203,230,200,230,199,230,197,230,195,230,192,230,189,230,186,230,184,230,183,230,182,230,179,231,176,231,172,231,167,231,164,231,161,231,159,231,156,232,154,232,151,232,147,232,143,232,141,232,140,232,137,232,134,232,131,232,128,232,127,232,125,232,123,232,120,232,118,233,116,233,115,233,114,233,113,233,111,233,110,233,109,233,108,233,108,233,107,233,106,232});
  one.learn("rect4", new int[] {106,232,107,233,108,233,108,233,109,233,110,233,111,233,113,233,114,233,115,233,116,233,118,233,120,232,123,232,125,232,127,232,128,232,131,232,134,232,137,232,140,232,141,232,143,232,147,232,151,232,154,232,156,232,159,231,161,231,164,231,167,231,172,231,176,231,179,231,182,230,183,230,184,230,186,230,189,230,192,230,195,230,197,230,199,230,200,230,203,230,206,230,211,230,217,230,225,230,234,230,244,230,249,230,252,230,254,230,255,230,256,229,257,229,259,229,263,229,267,228,272,228,277,227,280,226,282,226,285,226,289,225,295,225,301,225,308,224,313,224,318,224,320,223,322,223,324,223,326,222,329,222,332,222,335,222,338,221,342,220,344,220,345,220,346,219,347,219,348,219,349,219,350,219,351,220,352,220,353,220,353,220,353,221,354,222,354,223,354,225,355,227,355,228,355,229,355,230,355,232,355,233,355,234,355,236,355,237,355,239,355,240,355,241,356,243,356,244,356,245,355,246,355,247,355,248,355,250,355,251,355,253,354,255,354,257,354,258,354,259,354,262,354,264,354,266,353,269,353,271,353,271,353,272,352,273,351,273,349,273,347,273,346,273,345,273,344,274,343,274,342,274,341,274,340,274,338,274,337,274,335,274,333,274,332,274,331,274,329,274,327,274,323,274,321,274,318,274,316,274,314,274,312,274,310,273,307,273,304,272,301,271,299,270,297,270,295,270,293,270,291,270,289,270,286,270,283,270,280,270,277,270,274,269,272,269,267,269,263,268,258,268,249,268,238,268,228,268,219,268,214,268,210,268,208,268,207,268,205,268,203,268,200,268,195,268,189,268,179,268,166,268,154,268,143,268,135,269,127,269,123,270,119,271,116,272,112,272,108,274,105,274,102,275,101,275,99,275,98,276,96,276,95,277,92,277,90,277,89,277,88,276,88,275,88,274,88,273,88,272,88,271,88,270,88,269,88,268,88,267,88,266,88,265,88,264,89,263,89,262,90,260,90,259,90,256,90,254,90,253,90,252,90,251,90,249,90,248,91,247,91,246,91,244,92,242,92,241,92,239,92,237});
   
  // Rectangle - tall (from top-left)
  one.learn("rect5", new int[] {179,144,179,146,179,149,179,152,179,154,180,157,180,160,180,162,181,165,181,168,182,171,182,175,182,180,182,186,182,190,182,192,182,195,182,200,182,203,182,207,182,213,182,221,182,229,182,239,182,250,182,257,183,263,184,268,184,272,184,277,184,281,184,287,184,293,184,298,184,304,184,310,184,316,184,321,184,327,184,330,184,332,184,333,184,334,184,335,184,336,184,338,184,340,184,342,184,345,185,348,185,350,186,352,186,353,186,354,186,355,186,356,186,358,186,359,186,360,186,362,186,363,186,364,186,365,186,367,186,368,186,373,186,377,186,381,187,383,187,386,188,388,188,389,188,390,189,391,190,392,191,392,196,392,200,392,206,393,211,393,214,393,218,393,222,393,227,393,231,393,237,393,242,393,246,393,251,393,255,393,257,393,260,392,261,392,262,391,262,391,263,390,263,389,264,387,264,386,264,384,264,381,265,375,266,369,266,364,266,360,267,354,268,347,268,341,270,333,271,325,273,315,273,306,273,297,273,289,273,284,273,280,273,275,273,271,273,266,273,261,273,256,273,251,273,247,273,242,273,239,273,235,273,232,273,228,273,225,273,222,273,218,273,215,272,213,271,210,270,207,269,205,269,200,267,192,266,186,266,181,265,176,265,174,264,173,264,172,264,171,264,169,264,168,264,167,264,165,264,164,264,162,264,161,264,159,264,158,264,157,264,155,264,154,264,153,264,152,264,151,264,149,264,148,264,147,264,146,264,145,264,144,264,144,264,143,264,142,264,141,264,140,264,139,264,138,264,137,263,136,262,136,261,136,259,137,257,138,256,138,255,138,254,138,251,138,249,138,247,138,244,138,241,138,237,138,234,138,230,138,225,138,222,138,220,138,219,138,218,138,217,138,217,138,216,138,215,138,214,138,213,138,212,138,210,138,207,138,203,138,198,138,196,138,195,138,194,138,194,138,193,138,192,137,190,136,189,136});
  one.learn("rect6", new int[] {189,136,190,136,192,137,193,138,194,138,194,138,195,138,196,138,198,138,203,138,207,138,210,138,212,138,213,138,214,138,215,138,216,138,217,138,217,138,218,138,219,138,220,138,222,138,225,138,230,138,234,138,237,138,241,138,244,138,247,138,249,138,251,138,254,138,255,138,256,138,257,138,259,137,261,136,262,136,263,136,264,137,264,138,264,139,264,140,264,141,264,142,264,143,264,144,264,144,264,145,264,146,264,147,264,148,264,149,264,151,264,152,264,153,264,154,264,155,264,157,264,158,264,159,264,161,264,162,264,164,264,165,264,167,264,168,264,169,264,171,264,172,264,173,265,174,265,176,266,181,266,186,267,192,269,200,269,205,270,207,271,210,272,213,273,215,273,218,273,222,273,225,273,228,273,232,273,235,273,239,273,242,273,247,273,251,273,256,273,261,273,266,273,271,273,275,273,280,273,284,273,289,273,297,273,306,273,315,271,325,270,333,268,341,268,347,267,354,266,360,266,364,266,369,265,375,264,381,264,384,264,386,264,387,263,389,263,390,262,391,262,391,261,392,260,392,257,393,255,393,251,393,246,393,242,393,237,393,231,393,227,393,222,393,218,393,214,393,211,393,206,393,200,392,196,392,191,392,190,392,189,391,188,390,188,389,188,388,187,386,187,383,186,381,186,377,186,373,186,368,186,367,186,365,186,364,186,363,186,362,186,360,186,359,186,358,186,356,186,355,186,354,186,353,186,352,185,350,185,348,184,345,184,342,184,340,184,338,184,336,184,335,184,334,184,333,184,332,184,330,184,327,184,321,184,316,184,310,184,304,184,298,184,293,184,287,184,281,184,277,184,272,184,268,183,263,182,257,182,250,182,239,182,229,182,221,182,213,182,207,182,203,182,200,182,195,182,192,182,190,182,186,182,180,182,175,182,171,181,168,181,165,180,162,180,160,180,157,179,154,179,152,179,149,179,146,179,144});

  //-------------------------------------------
  // Circle (from top-left corner)
  one.learn("oval1", new int[] {104,207,103,208,103,210,102,211,102,212,102,213,102,214,102,216,102,218,102,219,102,220,102,222,102,225,102,227,102,229,102,231,102,232,102,233,103,236,104,238,104,239,105,241,106,242,107,244,108,245,109,246,110,247,111,249,112,250,113,251,114,252,115,253,116,254,118,255,120,256,122,257,126,260,131,264,135,266,137,268,141,271,143,272,144,272,145,272,147,272,149,272,151,272,153,272,155,271,157,271,158,270,160,269,162,268,164,267,166,266,167,266,169,264,170,264,172,262,174,261,176,259,177,257,179,256,182,254,183,253,184,251,185,250,186,248,188,246,189,244,189,242,190,240,190,239,191,238,191,237,191,235,191,234,191,233,191,231,191,229,191,227,191,225,191,224,191,223,191,221,191,219,191,218,191,217,191,216,191,214,191,213,191,212,191,211,191,210,190,209,190,208,189,207,188,206,187,205,186,204,185,202,184,201,184,200,183,198,182,197,181,195,180,194,179,193,177,192,175,192,173,192,171,192,168,192,166,192,164,192,163,192,162,192,161,192,160,192,159,192,158,192,156,192,154,192,152,192,151,192,150,192,149,192,147,192,146,192,145,192,144,192,142,192,141,192,140,192,139,192,137,192,135,193,133,193,131,193,130,194,128,194,127,194,125,195,124,195,123,196,122,196,121,197,120,197,119,197,118,198,118,199,117,200,117,201,117,202,116,203,115,204});
  one.learn("oval2", new int[] {115,204,116,203,117,202,117,201,117,200,118,199,118,198,119,197,120,197,121,197,122,196,123,196,124,195,125,195,127,194,128,194,130,194,131,193,133,193,135,193,137,192,139,192,140,192,141,192,142,192,144,192,145,192,146,192,147,192,149,192,150,192,151,192,152,192,154,192,156,192,158,192,159,192,160,192,161,192,162,192,163,192,164,192,166,192,168,192,171,192,173,192,175,192,177,192,179,193,180,194,181,195,182,197,183,198,184,200,184,201,185,202,186,204,187,205,188,206,189,207,190,208,190,209,191,210,191,211,191,212,191,213,191,214,191,216,191,217,191,218,191,219,191,221,191,223,191,224,191,225,191,227,191,229,191,231,191,233,191,234,191,235,191,237,191,238,190,239,190,240,189,242,189,244,188,246,186,248,185,250,184,251,183,253,182,254,179,256,177,257,176,259,174,261,172,262,170,264,169,264,167,266,166,266,164,267,162,268,160,269,158,270,157,271,155,271,153,272,151,272,149,272,147,272,145,272,144,272,143,272,141,271,137,268,135,266,131,264,126,260,122,257,120,256,118,255,116,254,115,253,114,252,113,251,112,250,111,249,110,247,109,246,108,245,107,244,106,242,105,241,104,239,104,238,103,236,102,233,102,232,102,231,102,229,102,227,102,225,102,222,102,220,102,219,102,218,102,216,102,214,102,213,102,212,102,211,103,210,103,208,104,207});
  
  // Ellipse - wide (from top-left corner)
  one.learn("oval3", new int[] {103,198,101,199,99,200,96,201,93,201,91,201,90,202,89,202,88,203,87,204,84,206,83,207,82,208,81,209,80,210,79,211,78,212,77,213,76,214,75,215,74,216,71,219,66,224,63,228,59,230,58,230,57,231,56,232,56,233,56,234,56,235,56,237,56,238,56,239,56,240,55,241,55,242,55,244,55,245,55,246,55,247,55,248,55,249,55,250,55,251,55,252,56,253,58,255,59,256,60,257,61,258,62,259,64,261,65,262,67,263,69,264,72,266,73,266,76,267,78,268,81,269,84,270,86,270,89,270,92,271,95,272,100,273,106,275,112,276,117,278,121,278,126,279,132,279,136,279,141,279,145,279,147,279,149,280,152,281,154,281,156,281,159,281,164,281,168,281,172,281,177,281,183,281,187,282,195,283,200,283,205,284,208,284,211,284,212,284,215,284,217,284,219,284,222,284,226,283,232,283,240,283,250,283,259,283,267,283,272,282,276,281,280,281,282,280,285,279,288,279,290,278,292,277,296,275,297,274,299,273,302,271,304,270,307,268,310,267,312,266,313,265,315,264,316,263,317,262,319,260,320,259,322,256,324,254,326,252,328,250,330,248,331,247,332,245,332,243,333,241,334,238,334,235,335,233,335,232,335,229,335,227,335,225,335,224,335,223,335,222,334,221,333,220,332,219,331,218,330,217,329,216,328,215,327,214,325,213,322,211,320,210,319,210,317,209,314,208,312,207,309,206,306,204,303,203,300,202,298,201,295,201,294,200,291,199,289,199,286,199,283,198,280,198,278,197,275,197,272,197,269,196,266,196,264,196,261,195,258,195,254,194,250,194,247,193,243,193,239,191,236,191,231,191,228,191,225,191,221,191,218,191,216,190,213,190,209,190,204,190,197,190,192,189,186,189,183,189,180,189,178,189,176,189,175,189,174,189,173,189,172,189,171,189,168,189,167,189,165,189,164,189,162,189,161,189,160,189,159,189,158,189,156,189,155,189,154,189,152,190,149,190,146,190,145,191,144,191,143,192,140,194,139,195});
  one.learn("oval4", new int[] {139,195,140,194,143,192,144,191,145,191,146,190,149,190,152,190,154,189,155,189,156,189,158,189,159,189,160,189,161,189,162,189,164,189,165,189,167,189,168,189,171,189,172,189,173,189,174,189,175,189,176,189,178,189,180,189,183,189,186,189,192,189,197,190,204,190,209,190,213,190,216,190,218,191,221,191,225,191,228,191,231,191,236,191,239,191,243,193,247,193,250,194,254,194,258,195,261,195,264,196,266,196,269,196,272,197,275,197,278,197,280,198,283,198,286,199,289,199,291,199,294,200,295,201,298,201,300,202,303,203,306,204,309,206,312,207,314,208,317,209,319,210,320,210,322,211,325,213,327,214,328,215,329,216,330,217,331,218,332,219,333,220,334,221,335,222,335,223,335,224,335,225,335,227,335,229,335,232,335,233,334,235,334,238,333,241,332,243,332,245,331,247,330,248,328,250,326,252,324,254,322,256,320,259,319,260,317,262,316,263,315,264,313,265,312,266,310,267,307,268,304,270,302,271,299,273,297,274,296,275,292,277,290,278,288,279,285,279,282,280,280,281,276,281,272,282,267,283,259,283,250,283,240,283,232,283,226,283,222,284,219,284,217,284,215,284,212,284,211,284,208,284,205,284,200,283,195,283,187,282,183,281,177,281,172,281,168,281,164,281,159,281,156,281,154,281,152,281,149,280,147,279,145,279,141,279,136,279,132,279,126,279,121,278,117,278,112,276,106,275,100,273,95,272,92,271,89,270,86,270,84,270,81,269,78,268,76,267,73,266,72,266,69,264,67,263,65,262,64,261,62,259,61,258,60,257,59,256,58,255,56,253,55,252,55,251,55,250,55,249,55,248,55,247,55,246,55,245,55,244,55,242,55,241,56,240,56,239,56,238,56,237,56,235,56,234,56,233,56,232,57,231,58,230,59,230,63,228,66,224,71,219,74,216,75,215,76,214,77,213,78,212,79,211,80,210,81,209,82,208,83,207,84,206,87,204,88,203,89,202,90,202,91,201,93,201,96,201,99,200,101,199,103,198});
  
  // Ellipse - tall (from top-left corner)
  one.learn("oval5", new int[] {152,177,151,178,150,179,149,180,148,182,148,183,148,184,147,186,147,188,147,189,146,190,146,192,146,193,145,194,145,195,144,196,144,197,143,199,143,200,143,201,142,203,142,204,142,206,142,207,142,209,141,211,140,213,140,214,140,216,140,218,139,219,139,221,139,224,139,226,138,228,138,231,137,234,137,236,136,238,136,240,136,241,136,244,136,245,136,247,136,249,136,251,136,253,136,255,136,258,136,260,136,263,136,266,136,268,136,271,136,273,136,275,136,276,136,277,136,278,136,279,136,280,136,281,136,283,136,284,136,286,137,288,138,290,138,292,139,295,140,296,140,297,140,299,141,301,141,302,141,304,141,306,142,308,142,309,142,311,142,313,143,315,144,316,145,318,146,319,147,321,148,323,149,325,149,326,150,328,151,330,152,332,152,333,153,336,154,338,154,339,155,340,155,342,156,343,157,344,159,347,161,349,163,352,165,354,166,356,167,357,168,359,169,360,170,361,171,362,172,363,173,364,174,365,175,366,176,367,177,368,178,368,179,369,181,370,182,370,183,370,185,370,186,371,187,371,188,371,189,371,191,371,192,371,194,370,196,368,197,367,199,365,200,363,201,362,203,360,205,358,206,357,208,355,210,353,211,351,212,349,213,348,214,346,215,345,215,343,217,341,217,340,218,338,220,335,221,333,222,330,223,327,224,324,225,321,225,319,226,315,228,312,229,307,230,303,231,298,232,295,232,291,233,286,233,282,233,279,234,275,234,271,234,267,235,265,235,262,235,259,236,256,236,254,236,252,236,250,236,248,236,247,236,245,236,244,236,241,236,238,236,235,236,232,236,230,236,228,236,227,236,226,236,224,236,223,236,221,236,218,236,216,236,213,236,211,236,208,236,206,236,203,236,202,237,199,237,197,237,196,237,195,237,194,237,192,237,190,237,189,237,188,237,187,237,186,237,185,237,184,237,183,237,181,237,180,237,178,236,176,236,174,235,173,235,172,234,170,233,168,233,167,232,166,231,164,230,163,229,162,228,161,227,160,225,158,224,157,224,156,223,155,222,154,221,153,220,152,219,150,218,149,217,148,216,147,215,146,214,145,213,144,212,143,211,142,208,141,207,140,206,139,205,139,204,138,203,138,202,137,202,137,201,137,199,137,198,136,196,136,194,136,191,136,189,136,186,136,183,136,181,136,179,136,178,136,177,137,175,138,174,138,173,139,171,140,169,141,168,141,166,143,165,144,164,145,163,146,162,147,161,148,160,149,159,150,158,151,157,152,156,152,156,153,155,154,155,155,154,156,154,157,153,158});
  one.learn("oval6", new int[] {153,158,154,157,154,156,155,155,155,154,156,153,156,152,157,152,158,151,159,150,160,149,161,148,162,147,163,146,164,145,165,144,166,143,168,141,169,141,171,140,173,139,174,138,175,138,177,137,178,136,179,136,181,136,183,136,186,136,189,136,191,136,194,136,196,136,198,136,199,137,201,137,202,137,202,137,203,138,204,138,205,139,206,139,207,140,208,141,211,142,212,143,213,144,214,145,215,146,216,147,217,148,218,149,219,150,220,152,221,153,222,154,223,155,224,156,224,157,225,158,227,160,228,161,229,162,230,163,231,164,232,166,233,167,233,168,234,170,235,172,235,173,236,174,236,176,237,178,237,180,237,181,237,183,237,184,237,185,237,186,237,187,237,188,237,189,237,190,237,192,237,194,237,195,237,196,237,197,237,199,236,202,236,203,236,206,236,208,236,211,236,213,236,216,236,218,236,221,236,223,236,224,236,226,236,227,236,228,236,230,236,232,236,235,236,238,236,241,236,244,236,245,236,247,236,248,236,250,236,252,236,254,236,256,235,259,235,262,235,265,234,267,234,271,234,275,233,279,233,282,233,286,232,291,232,295,231,298,230,303,229,307,228,312,226,315,225,319,225,321,224,324,223,327,222,330,221,333,220,335,218,338,217,340,217,341,215,343,215,345,214,346,213,348,212,349,211,351,210,353,208,355,206,357,205,358,203,360,201,362,200,363,199,365,197,367,196,368,194,370,192,371,191,371,189,371,188,371,187,371,186,371,185,370,183,370,182,370,181,370,179,369,178,368,177,368,176,367,175,366,174,365,173,364,172,363,171,362,170,361,169,360,168,359,167,357,166,356,165,354,163,352,161,349,159,347,157,344,156,343,155,342,155,340,154,339,154,338,153,336,152,333,152,332,151,330,150,328,149,326,149,325,148,323,147,321,146,319,145,318,144,316,143,315,142,313,142,311,142,309,142,308,141,306,141,304,141,302,141,301,140,299,140,297,140,296,139,295,138,292,138,290,137,288,136,286,136,284,136,283,136,281,136,280,136,279,136,278,136,277,136,276,136,275,136,273,136,271,136,268,136,266,136,263,136,260,136,258,136,255,136,253,136,251,136,249,136,247,136,245,136,244,136,241,136,240,136,238,137,236,137,234,138,231,138,228,139,226,139,224,139,221,139,219,140,218,140,216,140,214,140,213,141,211,142,209,142,207,142,206,142,204,142,203,143,201,143,200,143,199,144,197,144,196,145,195,145,194,146,193,146,192,146,190,147,189,147,188,147,186,148,184,148,183,148,182,149,180,150,179,151,178,152,177});
  
  // For natural mapping (from testing amongst ourselves)
  one.learn("oval 7", new int[] {16,216,314,214,311,212,310,211,308,209,305,208,304,207,303,206,301,205,298,204,295,201,290,199,283,197,277,194,268,191,259,190,252,188,246,187,240,186,235,186,230,186,226,186,222,186,218,187,215,189,211,191,210,192,207,194,205,196,204,197,203,199,202,202,201,205,200,211,198,216,197,222,197,230,196,233,196,237,196,243,196,248,200,254,204,259,208,266,210,271,214,277,217,282,220,287,222,291,226,294,228,296,232,301,235,302,240,304,247,307,252,308,258,308,261,308,265,308,269,308,274,306,279,305,285,302,291,299,298,298,304,296,309,292,314,289,316,287,318,285,320,283,322,281,323,280,324,278,325,276,325,275,325,272,325,269,325,266,325,263,325,260,326,257,327,254,327,252,327,249,327,246,327,244,327,242,327,240,327,239,327,238,327,237,327,237,326,236,325,235});
  one.learn("oval 8", new int[] {325,235,326,236,327,237,327,237,327,238,327,239,327,240,327,242,327,244,327,246,327,249,327,252,327,254,326,257,325,260,325,263,325,266,325,269,325,272,325,275,325,276,324,278,323,280,322,281,320,283,318,285,316,287,314,289,309,292,304,296,298,298,291,299,285,302,279,305,274,306,269,308,265,308,261,308,258,308,252,308,247,307,240,304,235,302,232,301,228,296,226,294,222,291,220,287,217,282,214,277,210,271,208,266,204,259,200,254,196,248,196,243,196,237,196,233,197,230,197,222,198,216,200,211,201,205,202,202,203,199,204,197,205,196,207,194,210,192,211,191,215,189,218,187,222,186,226,186,230,186,235,186,240,186,246,187,252,188,259,190,268,191,277,194,283,197,290,199,295,201,298,204,301,205,303,206,304,207,305,208,308,209,310,211,311,212,314,214,316,216});
  
  // Keeping colour gestures as counting horizontal zig-zag mnemonic
  //-------------------------------------------
  // 1 vertical peak "/\" (from bottom-left corner)
  one.learn("colour_black", new int[] {135,316,135,313,135,308,137,301,140,293,141,286,143,277,146,264,149,252,153,239,158,226,161,214,164,205,167,195,171,187,176,177,181,166,184,157,185,153,186,151,187,149,188,148,188,147,189,146,189,145,190,143,191,142,193,140,194,139,195,138,197,137,198,136,199,135,200,134,201,132,201,133,201,136,201,139,202,142,203,148,206,157,210,167,217,180,224,192,233,206,240,220,249,237,257,255,265,272,270,284,277,298,282,310,291,324,294,330,295,333,295,334,296,336,295,336,294,336});
  
  // 1.5 vertical peak "/\/" (from bottom-left corner)
  one.learn("colour_red", new int[] {113,308,113,305,113,302,113,300,113,297,114,293,114,289,116,281,117,273,118,264,120,254,121,241,123,230,124,225,127,219,128,215,129,212,129,210,129,209,130,208,131,209,132,212,132,214,133,216,136,223,138,227,140,233,142,239,146,244,152,253,156,260,164,269,168,276,176,287,181,293,186,300,190,307,194,312,198,317,202,324,204,329,207,334,209,337,210,339,211,340,211,341,212,342,212,341,214,339,216,335,218,327,221,320,222,314,224,304,227,293,228,282,228,272,231,261,231,255,233,249,233,245,234,242,234,240,234,239,234,238,235,237,235,236,235,235,236,233,237,231,237,230,238,228,238,227,238,225,238,224,239,223});
  
  // 2 vertical peak "/\/\" (from bottom-left corner)
  one.learn("colour_green", new int[] {101,311,101,307,101,302,101,299,102,292,102,282,104,273,107,263,110,254,117,236,122,226,123,217,125,211,127,203,130,192,133,183,135,175,135,171,136,170,137,171,138,172,138,175,140,179,142,185,146,192,151,205,158,219,163,233,167,244,171,255,176,263,177,269,179,274,182,277,185,284,188,286,190,288,191,291,192,292,193,294,194,296,194,297,195,298,195,299,196,302,198,305,198,307,199,309,200,310,200,311,201,313,203,315,204,316,204,314,204,311,204,307,205,303,206,298,206,291,206,280,206,270,209,259,214,244,217,234,222,225,228,216,232,210,238,202,242,196,244,190,248,183,251,177,252,174,252,172,253,171,254,170,255,169,256,168,257,167,258,170,259,175,259,181,260,189,263,200,266,211,269,222,272,231,275,239,278,248,280,256,282,265,285,275,290,284,293,290,295,296,296,301,299,304,300,307,301,310,302,312,302,314,303,317,304,320,304,321,305,323,306,325,306,326,307,327,306,328});
  
  // 2.5 vertical peak "/\/\/" (from bottom-left corner)
  one.learn("colour_blue", new int[] {97,285,99,282,100,279,101,276,104,271,105,267,107,262,110,254,114,245,117,238,118,230,121,224,122,219,123,214,124,211,125,205,128,202,129,200,129,198,130,197,130,198,131,201,132,203,134,207,138,213,142,222,145,230,148,239,152,248,154,252,157,257,159,264,162,269,163,272,164,274,165,276,165,277,165,278,166,279,167,280,167,279,168,275,169,269,169,261,170,255,170,245,172,236,173,230,176,223,177,220,179,217,180,214,181,211,182,209,183,207,183,206,184,205,184,204,185,203,187,205,189,207,190,208,192,211,193,212,194,214,196,217,198,221,202,226,207,231,211,236,215,241,216,245,218,248,220,252,221,253,221,255,222,257,223,259,224,261,225,263,226,264,226,265,228,267,228,268,229,269,230,271,231,273,232,275,233,278,234,280,235,281,236,279,236,276,237,272,237,266,238,258,239,250,241,241,242,233,243,225,246,218,249,211,251,205,254,198,256,195,257,192,258,190,259,188,260,187,261,188});
  
  
  
  // Keeping weight gestures as counting vertical zig-zag mnemonic
  //-------------------------------------------
  // 1 horizontal peak "╲" (from top-left corner)
  //                   "╱"
  one.learn("weight_thin", new int[] {143,100,148,105,159,114,171,123,188,134,206,148,226,162,244,174,258,186,266,191,268,193,269,194,270,195,271,196,272,197,273,198,273,199,274,199,274,201,273,204,271,206,269,210,265,217,261,225,254,236,247,250,242,271,234,291,226,309,222,323,219,333,219,340,218,344,217,346,217,348,216,349,215,350,215,351,214,352,213,353,212,354,211,355,211,356,210,357,209,359,209,360,208,361,208,363,207,364,207,365,206,366,206,367,205,368,205,369,204,371,203,372,203,372,204,373});
  one.learn("weight_thin1", new int[] {95,104,112,114,136,124,162,136,186,144,206,152,228,158,248,164,261,168,266,169,267,169,268,170,267,171,266,172,265,173,264,174,262,175,259,176,256,177,250,178,241,181,227,186,206,196,184,204,162,216,146,228,131,237,118,246,102,255,91,261,82,265,75,268,72,271,71,272,69,273});
  // 1.5 horizontal peak "╲" (from top-left corner)
  //                     "╱"
  //                     "╲"
  one.learn("weight_medium", new int[] {165,96,167,99,171,104,175,110,180,117,186,125,192,133,198,139,203,146,207,150,211,154,213,158,215,160,216,162,218,165,218,166,219,167,219,168,218,171,215,173,213,175,210,177,207,180,205,184,201,187,198,193,192,199,187,204,182,208,175,213,169,220,165,226,163,229,162,231,161,232,161,233,162,235,165,239,167,242,174,251,181,260,191,276,203,290,211,298,219,306,225,313,229,319,232,322,235,324});
  one.learn("weight_medium1", new int[] {193,148,204,158,215,169,227,180,240,193,256,209,270,222,279,231,283,235,283,236,282,237,280,239,278,241,275,244,273,246,267,251,260,255,249,261,242,266,231,270,224,273,219,276,213,278,209,282,208,285,207,288,207,291,207,292,207,293,207,294,207,296,210,299,212,304,216,310,222,319,233,333,250,351,264,364,282,376,300,390,318,406,334,420,350,434,364,448,373,459,377,468,382,474,385,477,389,481,391,482,392,482,393,481});
  // 2 horizontal peak "╲" (from top-left corner)
  //                   "╱"
  //                   "╲"
  //                   "╱"
  one.learn("weight_thick", new int[] {169,79,174,85,179,91,183,96,192,105,204,115,216,121,226,127,228,129,230,131,231,132,232,133,233,134,233,135,233,136,231,138,228,141,225,145,220,150,215,154,211,157,205,162,197,168,194,172,189,177,185,181,180,184,177,188,174,190,171,193,169,195,168,197,166,200,165,202,164,204,163,206,163,208,164,212,170,217,179,223,194,235,208,249,223,263,237,274,243,279,245,281,247,283,247,284,247,285,247,286,247,287,247,289,245,292,244,293,243,296,241,298,238,302,234,307,230,314,222,325,215,337,202,358,190,382,182,400,177,412,172,420,171,425,170,427,170,428});
  one.learn("weight_thick1", new int[] {186,102,193,106,203,112,215,120,234,130,252,138,267,147,280,154,287,159,292,161,296,165,297,166,298,167,298,168,296,170,293,174,285,176,278,179,270,183,263,186,258,188,252,191,245,193,237,198,233,199,227,201,224,202,222,203,221,203,220,204,218,205,217,206,216,207,214,209,212,211,209,214,206,217,199,221,194,227,192,229,191,230,190,231,190,232,190,233,190,234,190,235,191,237,193,238,198,241,207,242,221,247,235,251,254,255,273,260,293,266,309,274,320,279,330,282,335,285,337,286,337,287,337,288,337,289,337,290,337,291,337,293,337,294,337,296,337,297,336,299,335,300,334,302,332,305,331,306,328,309,324,313,319,322,314,333,305,345,297,355,291,362,285,368,280,373,276,377,270,381,266,383,264,385,263,386,262,387,261,388,260,389,259,390,257,392,256,393,255,394,254,395,253,396,252,397,250,399,249,400,248,401,247,402,245,404,244,405});
  one.learn("weight_thick2", new int[] {207,136,215,141,224,146,235,151,248,156,265,163,282,169,299,176,313,182,325,185,329,186,330,187,331,188,331,189,331,190,328,193,326,195,316,200,303,207,281,215,261,225,237,231,217,239,202,243,193,246,188,249,184,250,183,251,183,252,182,253,180,255,179,256,177,258,176,259,179,260,191,263,214,269,238,277,260,283,282,289,302,295,322,301,342,307,362,313,377,317,384,318,387,320,388,321,388,322,387,324,384,326,382,328,377,331,371,335,362,343,350,351,333,362,317,372,300,384,282,392,267,401,252,410,240,419,229,430,219,438,209,446,205,451,203,454,201,456,202,457,202,456,203,456,204,455});
  
  // 3. Bind templates to methods (callbacks):
  one.bind("undo1 undo2 sl1 sl2 sl3 sl4 sl5 sl6 rect1 rect2 rect3 rect4 rect5 rect6 oval1 oval2 oval3 oval4 oval5 oval6 oval7 oval8 colour_black colour_red colour_green colour_blue weight_thin weight_thin1 weight_medium weight_medium1 weight_thick weight_thick1 weight_thick2", 
  "detectedGesture");
}

// 4. Implement callbacks:
void detectedGesture(String gesture, float percent, int startX, int startY, int centroidX, int centroidY, int endX, int endY){
  // Book-keeping 
  totalGesturesDrawn += 1;
  // Debug
  // println("In AppState:: " + appState + " -- Gesture: "+gesture+", "+startX+"/"+startY+", "+centroidX+"/"+centroidY+", "+endX+"/"+endY);    
  
  // Undo gesture detected
  if(gesture == "undo1" || gesture == "undo2" ){
    undoLastDrawnShape();
  }
  
  // Straight-line gesture detected
  else if(gesture == "sl1" || gesture == "sl2" || gesture == "sl3" || gesture == "sl4" || gesture == "sl5" || gesture == "sl6" 
  && (appState == 2 || appState == 7 || appState == 9 || appState == 10)){
    // Initial setup for the interactive shape being drawn
    // println("Begin new straight-line shape");
    currentDrawnShape = createShape();
    currentDrawnShape.setFill(defaultShapeFillColour);
    
    currentDrawnShape.beginShape();
    currentDrawnShape.stroke(strokeColour);
    currentDrawnShape.strokeWeight(strokeWeight);
    
    // Update editor status 
    editorShapeIndex = 1; 
  }
  
  // Rectangle gesture detected
  else if( (appState == 3 || appState == 5 || appState == 7 || appState == 9 || appState == 10) &&
  gesture == "rect1" ||
  gesture == "rect2" ||
  gesture == "rect3" ||
  gesture == "rect4" ||
  gesture == "rect5" ||
  gesture == "rect6" ){
    // Update editor status 
    editorShapeIndex = 2;
  }
  
  // Oval gesture detected
  else if( (appState == 4 || appState == 6 || appState == 7 || appState == 9 || appState == 10) && 
  gesture == "oval1" ||
  gesture == "oval2" ||
  gesture == "oval3" ||
  gesture == "oval4" ||
  gesture == "oval5" ||
  gesture == "oval6" ||
  gesture == "oval7" ||
  gesture == "oval8" ){
    // Update editor status 
    editorShapeIndex = 3;
  }
  
  // Colour selection gestures detected
  else if( (appState == 5 || appState == 7 || appState == 9 || appState == 10) && gesture == "colour_black") { editorColourIndex = 0; }
  
  else if( (appState == 5 || appState == 7 || appState == 9 || appState == 10) && gesture == "colour_red") { editorColourIndex = 1; }
  
  else if( (appState == 5 || appState == 7 || appState == 9 || appState == 10) && gesture == "colour_green") { editorColourIndex = 2; }
  
  else if( (appState == 5 || appState == 7 || appState == 9 || appState == 10) && gesture == "colour_blue") { editorColourIndex = 3; }
  
  
  // Weight selection gestures detected
  else if( (appState == 6 || appState == 7 || appState == 9 || appState == 10) && gesture == "weight_thin" || gesture == "weight_thin1" ) { editorWeightIndex = 0; }
  
  else if( (appState == 6 || appState == 7 || appState == 9 || appState == 10) && gesture == "weight_medium" || gesture == "weight_medium1") { editorWeightIndex = 1; }
  
  else if( (appState == 6 || appState == 7 || appState == 9 || appState == 10) && gesture == "weight_thick" || gesture == "weight_thick1" || gesture == "weight_thick2" ) { editorWeightIndex = 2; }
}


// App state display if-else ladder
void draw() {
  if(appState == 0) {
    startScreen();
  } else if (appState == 1) {
    tutorialShortcutFreeformlineScreen();
  } else if (appState == 2) {
    tutorialShortcutStraightlineScreen();
  } else if (appState == 3) {
    tutorialShortcutRectangleScreen();
  } else if (appState == 4) {
    tutorialShortcutOvalScreen();
  } else if (appState == 5) {
    tutorialShortcutColoursScreen();
  } else if (appState == 6) {
    tutorialShortcutWeightsScreen();
  } else if (appState == 7) {
    tutorialShortcutUndoScreen();
  } else if (appState == 8) {
    reviewKeyboardShortcutsScreen();
  } else if (appState == 9) {
    drawingTask1Screen();
  } else if (appState == 10) {
    drawingTask2Screen();
  } else if (appState == 11) {
    endingScreen();
  }
  
  // Optional draw:
  one.draw();
}

// Screen content

// Assignment title and user id input
void startScreen() {
  
  background(screenBgColour);
 
  fill(textDefaultColour);
  textFont(headerPFont);
  text("CS6065: Assignment 2 - Gestures", 32, 58);
  
  textFont(captionPFont);
  text("Augmented Interactions: Evaluating parallel interaction schemes for memorability and usability", 32, 87);
 
  textFont(defaultCopyPFont);
  text("Harshita · Shubham · Avinaba", 32, 138);
  
  noStroke();
  fill(buttonNextTutorialShortcutFreeformLineBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Free-form line", 127, 404);
  
}



// Helper functions 
void drawDrawArea(int startX, int startY, int endX, int endY){
  int borderRadius = 4;
  // TODO: Guard clauses
  
  // Draw rounded rectangle
  stroke(defaultBorderColour);
  strokeWeight(defaultBorderWeight);
  fill(drawingAreaBgColour);
  rect(startX, startY, endX, endY, borderRadius);
  
}

void drawCurrentSettings(int startX, int startY, boolean section1Active, boolean section2Active, boolean section3Active) {
  int endX = startX + 193;
  int endY = startY + 116;
  int borderRadius = 4;
  
  int separator1_Y = startY + 37;
  int separator2_Y = startY + 74;
  
  int labelX = startX + 12;
  int valueTextX = startX + 61;
  
  int label_line1_Y = startY + 11 + 14;
  int label_line2_Y = startY + 48 + 14;
  int label_line3_Y = startY + 89 + 14;
  
  
  
  // TODO: Gaurd clauses
  
  // Draw rounded rectangle 
  stroke(defaultBorderColour);
  strokeWeight(defaultBorderWeight);
  fill(screenBgColour);
  rect(startX, startY, endX, endY, borderRadius);
  
  // Draw separators
  line(startX, separator1_Y, endX, separator1_Y);
  line(startX, separator2_Y, endX, separator2_Y);
  
  
  // Populate labels
  // Sections may be turned inactive to draw participant's attention to a single mechanic
  
  // Check if section is active
  if(section1Active) {
    fill(textDefaultColour);
  } else {
    fill(textInactiveColour);
  }
  
  textFont(currentSettingsLabelPFont);
  // Selected shape 
  text("Shape:", labelX, label_line1_Y);
  // Gaurd clause
  if(editorShapeIndex >= 0 && editorShapeIndex <= 3) {
    text(shapeOptionDisplays[editorShapeIndex], valueTextX, label_line1_Y);
  } 
  // Forced unset 
  else {
    text("None", valueTextX, label_line1_Y);
  }
  
   // Check if section is active
  if(section2Active) {
    fill(textDefaultColour);
  } else {
    fill(textInactiveColour);
  }
  // Selected Colour 
  text("Colour:", labelX, label_line2_Y);
  // Gaurd clause
  if(editorColourIndex >= 0 && editorColourIndex <= 3) {
    text(colourOptionDisplays[editorColourIndex], valueTextX, label_line2_Y);
  } 
  // Forced unset 
  else {
    text("None", valueTextX, label_line2_Y);
  }
  
   // Check if section is active
  if(section3Active) {
    fill(textDefaultColour);
  } else {
    fill(textInactiveColour);
  }
  // Selected Weight 
  text("Weight:", labelX, label_line3_Y);
  // Gaurd clause
  if(editorWeightIndex >= 0 && editorWeightIndex <= 2) {
    text(weightOptionDisplays[editorWeightIndex], valueTextX, label_line3_Y);
  } 
  // Forced unset 
  else {
    text("None", valueTextX, label_line3_Y);
  }
  
}

// Tutorial: Selecting free-form line with a shortcut key 
void tutorialShortcutFreeformlineScreen() {
  background(screenBgColour);
  
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Tutorial: Draw Free-form line", 32, 58);
  
  // Check if selection task if free-form line selected
  if(editorShapeIndex == 0){
    tutFreeformSelectedShortcut = true;
  }
  // Then draw circle
  if(tutFreeformSelectedShortcut){
    image(checkCircleGreenImage, 32, 74, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Right Click to select “Free-form line”", 58, 90);
  
  
  // Check if a single object has been drawn
  if(drawnShapeList.size() > 0){
    tutFreeformDrawnShortcut = true;
  }
  // Then draw circle
  if(tutFreeformDrawnShortcut){
    image(checkCircleGreenImage, 32, 104, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Left click and drag the pointer to draw", 58, 121);
  
  textFont(captionPFont);
  text("Drawing area", 32, 171);
  
  // Drawing area
  drawDrawArea(32, 181, 559, 365);
  
  // Display all the drawn shapes
  for(PShape drawnPShape : drawnShapeList){
    drawnPShape.setFill(defaultShapeFillColour);
    shape(drawnPShape);
  }
  
  fill(textDefaultColour);
  textFont(captionPFont);
  text("Current settings", 576, 171);
  
  // Editor status area 
  drawCurrentSettings(575, 181, true, false, false);
  
  noStroke();
  
  // Check if tutorial tasks are done 
  if( tutFreeformSelectedShortcut && tutFreeformDrawnShortcut && !buttonNextTutorialShortcutStraightLineActivated) {    
    buttonNextTutorialShortcutStraightLineBgColour = buttonPrimaryDefaultBgColour;
    
    // Change colour only once, so Hover and Pressed state can work
    buttonNextTutorialShortcutStraightLineActivated = true;
  }
  
  fill(buttonNextTutorialShortcutStraightLineBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Straight Line", 134, 404);
}

// Interactivity (Buttons)
// Mouse Hovers 
void mouseMoved(){
  
  // for Start screen   
  if(appState == 0) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
      buttonNextTutorialShortcutFreeformLineBgColour = buttonPrimaryHoverBgColour;
    } else {
      buttonNextTutorialShortcutFreeformLineBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // - Tutorial: Free-form with Shortcut
  else if(appState == 1) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutFreeformSelectedShortcut && tutFreeformDrawnShortcut ) {
      buttonNextTutorialShortcutStraightLineBgColour = buttonPrimaryHoverBgColour;
    }
    else if( tutFreeformSelectedShortcut && tutFreeformDrawnShortcut ){
      buttonNextTutorialShortcutStraightLineBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // - Tutorial: Straight with Shortcut
  else if(appState == 2) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutStraightSelectedShortcut && tutStraightDrawnShortcut ) {
      buttonNextTutorialShortcutRectangleBgColour = buttonPrimaryHoverBgColour;
    }
    else if( tutStraightSelectedShortcut && tutStraightDrawnShortcut ){
      buttonNextTutorialShortcutRectangleBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // - Tutorial: Rectangle with Shortcut
  else if(appState == 3) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutRectangleSelectedShortcut && tutRectangleDrawnShortcut ) {
      buttonNextTutorialShortcutOvalBgColour = buttonPrimaryHoverBgColour;
    }
    else if( tutRectangleSelectedShortcut && tutRectangleDrawnShortcut ){
      buttonNextTutorialShortcutOvalBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  
  // - Tutorial: Oval with Shortcut
  else if(appState == 4) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutOvalSelectedShortcut && tutOvalDrawnShortcut ) {
      buttonNextTutorialShortcutColourBgColour = buttonPrimaryHoverBgColour;
    }
    else if( tutRectangleSelectedShortcut && tutRectangleDrawnShortcut ){
      buttonNextTutorialShortcutColourBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // - Tutorial: Colours with Shortcut
  else if(appState == 5) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutAllColoursSelectedShortcut && tutDrawnWithAllColoursShortcut ) {
      buttonNextTutorialShortcutWeightBgColour = buttonPrimaryHoverBgColour;
    }
    else if( tutAllColoursSelectedShortcut && tutDrawnWithAllColoursShortcut ){
      buttonNextTutorialShortcutWeightBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // - Tutorial: Weights with Shortcut
  else if(appState == 6) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutAllWeightsSelectedShortcut && tutDrawnWithAllWeightsShortcut ) {
      buttonNextTutorialShortcutUndoBgColour = buttonPrimaryHoverBgColour;
    }
    else if( tutAllWeightsSelectedShortcut && tutDrawnWithAllWeightsShortcut ){
      buttonNextTutorialShortcutUndoBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // - Tutorial: Undo
  else if(appState == 7) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tut3ShapesDrawnShortcut && tut3DeletedShortcut ) {
      buttonNextTutorialShortcutReviewBgColour = buttonPrimaryHoverBgColour;
    }
    else if( tutAllWeightsSelectedShortcut && tutDrawnWithAllWeightsShortcut ){
      buttonNextTutorialShortcutReviewBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // - Review: Keyboard Shortcuts 
  else if(appState == 8) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
      buttonNextTask1ShortcutBgColour = buttonPrimaryHoverBgColour;
    } else {
      buttonNextTask1ShortcutBgColour = buttonPrimaryDefaultBgColour;
    }
  }

  // - Drawing Task 1 
  else if(appState == 9) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
      buttonNextTask2ShortcutBgColour = buttonPrimaryHoverBgColour;
    } else {
      buttonNextTask2ShortcutBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // - Drawing Task 2 
  else if(appState == 10) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
      buttonNextConclusionShortcutBgColour = buttonPrimaryHoverBgColour;
    } else {
      buttonNextConclusionShortcutBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // - Conclusion
  else if(appState == 11) {
    //  - Hover on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
      buttonExitBgColour = buttonPrimaryHoverBgColour;
    } else {
      buttonExitBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
}

// Mouse Pressed  
void mousePressed(){
  
  // for Start screen   
  if(appState == 0) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
      buttonNextTutorialShortcutFreeformLineBgColour = buttonPrimaryPressedBgColour;
    } else {
      buttonNextTutorialShortcutFreeformLineBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // - Tutorial: Free-form with Shortcut
  else if(appState == 1) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutFreeformSelectedShortcut && tutFreeformDrawnShortcut ) {
      buttonNextTutorialShortcutStraightLineBgColour = buttonPrimaryPressedBgColour;
    } else if( tutFreeformSelectedShortcut && tutFreeformDrawnShortcut ){
      buttonNextTutorialShortcutStraightLineBgColour = buttonPrimaryDefaultBgColour;
    }
   }
   
  // - Tutorial: Straight with Shortcut
  else if(appState == 2) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutStraightSelectedShortcut && tutStraightDrawnShortcut ) {
      buttonNextTutorialShortcutRectangleBgColour = buttonPrimaryPressedBgColour;
    } else if( tutFreeformSelectedShortcut && tutFreeformDrawnShortcut ){
      buttonNextTutorialShortcutRectangleBgColour = buttonPrimaryDefaultBgColour;
    }
    
    // Drawing subclauses
    if(mouseButton == LEFT){
      // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
      if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
        // Set stroke colour and weight for a shape still being drawn
        if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
        if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; }
        
        // For shape: Straight line drawing (first point)
        if(editorShapeIndex == 1){
          currentDrawnShape.vertex(mouseX, mouseY);
          
          // Debug
          // println("SL Vertex pair added:", mouseX, mouseY);
          // println("SL Vertex count:", currentDrawnShape.getVertexCount());
          }
        
        }
      }
    
   }
   
  // - Tutorial: Rectangle with Shortcut
  else if(appState == 3) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutRectangleSelectedShortcut && tutRectangleDrawnShortcut ) {
      buttonNextTutorialShortcutOvalBgColour = buttonPrimaryPressedBgColour;
    } else if( tutRectangleSelectedShortcut && tutRectangleDrawnShortcut ){
      buttonNextTutorialShortcutOvalBgColour = buttonPrimaryDefaultBgColour;
    }
    
    // Drawing subclauses
    if(mouseButton == LEFT){
      // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
      if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
        // Set stroke colour and weight for a shape still being drawn
        if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
        if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; }
        
        // For shape: Rectangle drawing (save first point)
        if(editorShapeIndex == 2){
          
          rectangleStartPoint = new PVector(mouseX, mouseY); 
          // Debug
          // println("Rec Vertex pair saved:", mouseX, mouseY);
          }
        
        }
      }
    
   }
   
   // - Tutorial: Oval with Shortcut
  else if(appState == 4) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutOvalSelectedShortcut && tutOvalDrawnShortcut ) {
      buttonNextTutorialShortcutColourBgColour = buttonPrimaryPressedBgColour;
    } else if( tutOvalSelectedShortcut && tutOvalDrawnShortcut ){
      buttonNextTutorialShortcutColourBgColour = buttonPrimaryDefaultBgColour;
    }
    
    // Drawing subclauses
    if(mouseButton == LEFT){
      // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
      if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
        // Set stroke colour and weight for a shape still being drawn
        if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
        if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; }
        
        // For shape: Oval drawing (save first point)
        if(editorShapeIndex == 3){
          
          ovalStartPoint = new PVector(mouseX, mouseY); 
          // Debug
          // println("Oval Vertex pair saved:", mouseX, mouseY);
          }
        
        }
      }
    
   }
   
  // - Tutorial: Coloured Rectangles with Shortcut
  else if(appState == 5) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutAllColoursSelectedShortcut && tutDrawnWithAllColoursShortcut ) {
      buttonNextTutorialShortcutWeightBgColour = buttonPrimaryPressedBgColour;
    } else if( tutAllColoursSelectedShortcut && tutDrawnWithAllColoursShortcut ){
      buttonNextTutorialShortcutWeightBgColour = buttonPrimaryDefaultBgColour;
    }
    
    // Drawing subclauses
    if(mouseButton == LEFT){
      // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
      if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
        // Set stroke colour and weight for a shape still being drawn
        if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
        if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; }
        
        // For shape: Rectangle drawing (save first point)
        if(editorShapeIndex == 2){
          
          rectangleStartPoint = new PVector(mouseX, mouseY); 
          // Debug
          // println("Rec Vertex pair saved:", mouseX, mouseY);
          }
        
        }
      }
    
   }
   
   // - Tutorial: Weighted Ovals lines with Shortcut
  else if(appState == 6) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutAllWeightsSelectedShortcut && tutDrawnWithAllWeightsShortcut ) {
      buttonNextTutorialShortcutUndoBgColour = buttonPrimaryPressedBgColour;
    } else if( tutAllWeightsSelectedShortcut && tutDrawnWithAllWeightsShortcut ){
      buttonNextTutorialShortcutUndoBgColour = buttonPrimaryDefaultBgColour;
    }
    
    // Drawing subclauses
    if(mouseButton == LEFT){
      // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
      if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
        // Set stroke colour and weight for a shape still being drawn
        if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
        if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; }
        
        // For shape: Oval drawing (save first point)
        if(editorShapeIndex == 3){
          
          ovalStartPoint = new PVector(mouseX, mouseY); 
          // Debug
          // println("Oval Vertex pair saved:", mouseX, mouseY);
          }
        
        }
      }
    
   }
   
   // Tutorial: Undo
  else if(appState == 7) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tut3ShapesDrawnShortcut && tut3DeletedShortcut ) {
      buttonNextTutorialShortcutReviewBgColour = buttonPrimaryPressedBgColour;
    } else if (tut3ShapesDrawnShortcut && tut3DeletedShortcut){
      buttonNextTutorialShortcutReviewBgColour = buttonPrimaryDefaultBgColour;
    }
    // Drawing subclauses
    if(mouseButton == LEFT){
      // - Draw on drawing area: drawDrawArea(32, 181, 559, 365)
      if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
        // Set stroke colour and weight for a shape still being drawn
        if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
        if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; }
        
        // For shape: Straight line drawing (add first point)
        if(editorShapeIndex == 1){
          currentDrawnShape.vertex(mouseX, mouseY);
        }

        // For shape: Rectangle drawing (save first point)
        else if(editorShapeIndex == 2){
          rectangleStartPoint = new PVector(mouseX, mouseY); 

        }
        // For shape: Oval drawing (save center)
        else if(editorShapeIndex == 3){          
          ovalStartPoint = new PVector(mouseX, mouseY); 
        }
        
      }
    }
  }
   
   // for Review: Keyboard Shortcuts   
  else if(appState == 8) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
      buttonNextTask1ShortcutBgColour = buttonPrimaryPressedBgColour;
    } else {
      buttonNextTask1ShortcutBgColour = buttonPrimaryDefaultBgColour;
    }
  }
  
  // Drawing Task 1
  else if(appState == 9) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
      buttonNextTask2ShortcutBgColour = buttonPrimaryPressedBgColour;
    } else {
      buttonNextTask2ShortcutBgColour = buttonPrimaryDefaultBgColour;
    }
    // Drawing subclauses
    if(mouseButton == LEFT){
      // - Draw on drawing area: drawDrawArea(32, 98, 559, 365)
      if(mouseX >= 32 && mouseY >= 98 && mouseX <= 559 && mouseY <= 365) {
        // Set stroke colour and weight for a shape still being drawn
        if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
        if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; }
        
        // For shape: Straight line drawing (add first point)
        if(editorShapeIndex == 1){
          currentDrawnShape.vertex(mouseX, mouseY);
        }

        // For shape: Rectangle drawing (save first point)
        else if(editorShapeIndex == 2){
          rectangleStartPoint = new PVector(mouseX, mouseY); 

        }
        // For shape: Oval drawing (save center)
        else if(editorShapeIndex == 3){          
          ovalStartPoint = new PVector(mouseX, mouseY); 
        }
        
      }
    }
  }
  
  // Drawing Task 2
  else if(appState == 10) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
      buttonNextConclusionShortcutBgColour = buttonPrimaryPressedBgColour;
    } else {
      buttonNextConclusionShortcutBgColour = buttonPrimaryDefaultBgColour;
    }
    // Drawing subclauses
    if(mouseButton == LEFT){
      // - Draw on drawing area: drawDrawArea(32, 98, 559, 365)
      if(mouseX >= 32 && mouseY >= 98 && mouseX <= 559 && mouseY <= 365) {
        // Set stroke colour and weight for a shape still being drawn
        if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
        if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; }
        
        // For shape: Straight line drawing (add first point)
        if(editorShapeIndex == 1){
          currentDrawnShape.vertex(mouseX, mouseY);
        }

        // For shape: Rectangle drawing (save first point)
        else if(editorShapeIndex == 2){
          rectangleStartPoint = new PVector(mouseX, mouseY); 

        }
        // For shape: Oval drawing (save center)
        else if(editorShapeIndex == 3){          
          ovalStartPoint = new PVector(mouseX, mouseY); 
        }
        
      }
    }
  }
  // Conclusion screen
  else if(appState == 11) {
    //  - Press on button: rect(32, 381, 362, 417, 4);
    if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
      buttonExitBgColour = buttonPrimaryPressedBgColour;
    } else {
      buttonExitBgColour = buttonPrimaryDefaultBgColour;
    }
  }

}

// Mouse Clicked  
void mouseClicked(){
  // Book-keeping
  totalNoOfClicks += 1;
  if(mouseButton == RIGHT){
    // Book-keeping
    totalGesturesDrawn += 1;
    
    // Initial setup for the interactive shape being drawn
    // println("Begin new free-form shape");
    currentDrawnShape = createShape();
    currentDrawnShape.setFill(defaultShapeFillColour);
    
    currentDrawnShape.beginShape();
    currentDrawnShape.stroke(strokeColour);
    currentDrawnShape.strokeWeight(strokeWeight);
    
    // Update current editor status 
    editorShapeIndex = 0; 
  } 
  
  else if(mouseButton == LEFT) {
    // for Start screen   
    if(appState == 0) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
        
        // Book-keeping
        println("Time till Screen changed to Free-form line Tutorial: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        // change app state
        appState = 1;
      }
    }
    // - Tutorial: Free-form with Shortcut
    else if(appState == 1) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutFreeformSelectedShortcut && tutFreeformDrawnShortcut ) {
        
        // Book-keeping
        println("Time till Screen changed to Straight line Tutorial: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        // Clear all shapes
        clearAllDrawnShapes();
        shapesDrawnLast = 0;
        
        // change app state
        appState = 2;
      }
    }
    // - Tutorial: Straight-line with Shortcut
    else if(appState == 2) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutStraightSelectedShortcut && tutStraightDrawnShortcut ) {
        // Book-keeping
        println("Time till Screen changed to Rectangle Tutorial: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        // Clear all shapes
        clearAllDrawnShapes();
        shapesDrawnLast = 0;
        
        // change app state
        appState = 3;
      }
    }
    
    // - Tutorial: Rectangle with Shortcut
    else if(appState == 3) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutRectangleSelectedShortcut && tutRectangleDrawnShortcut ) {
        // Book-keeping
        println("Time till Screen changed to Oval Tutorial: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        // Clear all shapes
        clearAllDrawnShapes();
        shapesDrawnLast = 0;
        
        // change app state
        appState = 4;
      }
    }
    
    // - Tutorial: Oval with Shortcut
    else if(appState == 4) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutOvalSelectedShortcut && tutOvalDrawnShortcut ) {
        // Book-keeping
        println("Time till Screen changed to Colours Tutorial: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        // Clear all shapes
        clearAllDrawnShapes();
        shapesDrawnLast = 0;
        
        // Set Colours to Null value
        editorColourIndex = -1;
        
        // Set Shape to Rectangle
        editorShapeIndex = 2;
        
        // change app state
        appState = 5;
      }
    }
    
    // - Tutorial: Coloured Rectangles with Shortcut
    else if(appState == 5) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutAllColoursSelectedShortcut && tutDrawnWithAllColoursShortcut ) {
        // Book-keeping
        println("Time till Screen changed to Weights Tutorial: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        // Clear all shapes
        clearAllDrawnShapes();
        shapesDrawnLast = 0;
        
        // Set Weight to Null value
        editorWeightIndex = -1;
        
        // Set Shape to Oval
        editorShapeIndex = 3;
        
        // change app state
        appState = 6;
      }
    }
    
    // - Tutorial: Weighted Ovals with Shortcut
    else if(appState == 6) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tutAllWeightsSelectedShortcut && tutDrawnWithAllWeightsShortcut ) {
        // Book-keeping
        println("Time till Screen changed to Undo Tutorial: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        
        // Clear all shapes
        clearAllDrawnShapes();
        shapesDrawnLast = 0;
        
        // change app state
        appState = 7;
      }
    }
    
    // - Tutorial: Undo
    else if(appState == 7) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 && tut3ShapesDrawnShortcut && tut3DeletedShortcut ) {
        // Book-keeping
        println("Time till Screen changed to Review of Shortcuts: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        // Clear all shapes
        clearAllDrawnShapes();
        shapesDrawnLast = 0;
        
        // change app state
        appState = 8;
      }
    }
    
    // for Review Keyboard shortcut screen   
    else if(appState == 8) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
        // Book-keeping
        println("Time till Screen changed to Drawing Task 1: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        // change app state
        appState = 9;
      }
    }
    
    // for Drawing Task 1   
    else if(appState == 9) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
        // Book-keeping
        println("Time till Screen changed to Drawing Task 2: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        // Clear all shapes
        clearAllDrawnShapes();
        shapesDrawnLast = 0;
        
        // change app state
        appState = 10;
      }
    }
    
    // Drawing Task 2
    else if(appState == 10) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
        // Book-keeping
        println("Time till Screen changed to Ending Screen: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
      
        
        // Clear all shapes
        clearAllDrawnShapes();
        shapesDrawnLast = 0;
        
        // change app state
        appState = 11;
      }
    }
    
    // Thank you - and contact us screen
    else if(appState == 11) {
      //  - Hover on button: rect(32, 381, 362, 417, 4);
      if( mouseX >= 32 && mouseX <= 362 && mouseY >= 381 && mouseY <= 417 ) {
        // Book-keeping
        println("Time till Exit: ", millis(), 
        ", total Clicks: ", totalNoOfClicks, 
        ", total Gestures detected: ", totalGesturesDrawn, 
        ", shapes Drawn in last screen: ", shapesDrawnLast
        );
        
        
        // Close app
        exit();
      }
    }
  }
  
}


// Mouse Dragged (pressed and moved) 
void mouseDragged(){
  
  // println("Invoked - mouseDragged"); // [WORKS] 
  
  if(mouseButton == RIGHT) {
    one.track(mouseX, mouseY);
  }
  
  
  // Keeping drawing separate
  else if(mouseButton == LEFT){
    // for Start screen   
    if(appState == 0) {
    }
    // Tutorial: Free-form line with Shortcut
    else if(appState == 1) {
      // println("Invoked - mouseDragged - at Tutotrial free-form"); // [WORKS]
      if(mouseButton == LEFT){
        // println("Invoked - Left - mouseDragged - at Tutotrial free-form", mouseX, mouseY, millis()); //[WORKS]
        
        // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
        if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
          
          // println("Invoked - Bounded - Left - mouseDragged - at Tutotrial free-form", mouseX, mouseY, millis()); //[WORKS]
          
          // Set stroke colour and weight for a shape still being drawn
          if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
          if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; } 
          
          
          // For shape: free-form line 
          if(editorShapeIndex == 0){
            currentDrawnShape.stroke(strokeColour);
            currentDrawnShape.strokeWeight(strokeWeight);
            // println("Invoked - found free-form line"); //[WORKS]         
            // If dragged within the drawing-area keep added new vertices
            // while(mousePressed == true   &&  mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365){
              // currentDrawnShape.vertex(pmouseX, pmouseY);
              // currentDrawnShape.vertex(mouseX, mouseY);
              // println("Vertex added:", mouseX, mouseY);
            // } 
            // println("Vertex added:", mouseX, mouseY);
            currentDrawnShape.vertex(mouseX, mouseY);
            
            // Preview with Alpha
            currentDrawnShape.stroke(colourOptionsAlpha[editorColourIndex]);
            shape(currentDrawnShape);
            // Revert to final Colour
            currentDrawnShape.stroke(colourOptions[editorColourIndex]);
          }
          
        }
      }
      
    }
    
    // Tutorial: Straight line with Shortcut
    else if(appState == 2) {
      if(mouseButton == LEFT){
        // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
        if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
          // Set stroke colour and weight for a shape still being drawn
          if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
          if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; } 
          
          // For shape: straight line
          if(editorShapeIndex == 1){
            currentDrawnShape.stroke(strokeColour);
            currentDrawnShape.strokeWeight(strokeWeight);
            // println("No of vertices in this SL:", currentDrawnShape.getVertexCount());
            
            // Guard clause
            if(currentDrawnShape.getVertexCount() == 1){
                // Debug
                PVector startVertex = currentDrawnShape.getVertex(0);
                // println("Start point: ", startVertex.x, startVertex.y);
                // println("Mouse point: ", mouseX, mouseY);
                
                // Preview with Alpha
                stroke(colourOptionsAlpha[editorColourIndex]);
                strokeWeight(strokeWeight);
                line(startVertex.x, startVertex.y, mouseX, mouseY);
                // Revert to final Colour
                stroke(colourOptions[editorColourIndex]);
             }
            
          }
        }
      }
      
    }
    
    // Tutorial: Rectangle with Shortcut
    else if(appState == 3) {
      if(mouseButton == LEFT){
        // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
        if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
          // Set stroke colour and weight for a shape still being drawn
          if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
          if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; } 
          
          // For shape: rectangle
          if(editorShapeIndex == 2){
              // currentDrawnShape.stroke(strokeColour);
              // currentDrawnShape.strokeWeight(strokeWeight);
              // println("No of vertices in this SL:", currentDrawnShape.getVertexCount());
          
  
              // println("Start point: ", startVertex.x, startVertex.y);
              // println("Mouse point: ", mouseX, mouseY);
              
              // Preview with Alpha
              stroke(colourOptionsAlpha[editorColourIndex]);
              strokeWeight(strokeWeight);
              fill(defaultShapeFillColour);
              rect(rectangleStartPoint.x, rectangleStartPoint.y, mouseX, mouseY);
              // Revert to final Colour
              stroke(colourOptions[editorColourIndex]);
             
            
          }
        }
      }
      
    }
    
    // Tutorial: Oval with Shortcut
    else if(appState == 4) {
      if(mouseButton == LEFT){
        // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
        if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
          // Set stroke colour and weight for a shape still being drawn
          if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
          if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; } 
          
          // For shape: Oval
          if(editorShapeIndex == 3){
              // Preview with Alpha
              stroke(colourOptionsAlpha[editorColourIndex]);
              strokeWeight(strokeWeight);
              fill(defaultShapeFillColour);
              float radiusX = dist(ovalStartPoint.x, 0, mouseX, 0);
              float radiusY = dist(0, ovalStartPoint.y, 0, mouseY);
              ellipse(ovalStartPoint.x, ovalStartPoint.y, radiusX, radiusY);
              // ellipse(ovalStartPoint.x, ovalStartPoint.y, mouseX, mouseY);
              // Revert to final Colour
              stroke(colourOptions[editorColourIndex]);
             
            
          }
        }
      }
      
    }
    
    // Tutorial: Coloured Rectangles with Shortcut
    else if(appState == 5) {
      if(mouseButton == LEFT){
        // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
        if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
          // Set stroke colour and weight for a shape still being drawn
          if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
          if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; } 
          
          // For shape: rectangle
          if(editorShapeIndex == 2){
              
              // Guard clause
              if(editorColourIndex >= 0) {
              
                // Preview with Alpha
                stroke(colourOptionsAlpha[editorColourIndex]);
                strokeWeight(strokeWeight);
                fill(defaultShapeFillColour);
                rect(rectangleStartPoint.x, rectangleStartPoint.y, mouseX, mouseY);
                // Revert to final Colour
                stroke(colourOptions[editorColourIndex]);
              }
             
            
          }
        }
      }    
    }
    
    // Tutorial: Weighted Ovals with Shortcut
    else if(appState == 6) {
      if(mouseButton == LEFT){
        // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
        if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
          // Set stroke colour and weight for a shape still being drawn
          if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
          if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; } 
          
          // For shape: Oval
          if(editorShapeIndex == 3){
            
            // Guard clause
              if(editorWeightIndex >= 0) {
                // Preview with Alpha
                stroke(colourOptionsAlpha[editorColourIndex]);
                strokeWeight(strokeWeight);
                fill(defaultShapeFillColour);
                float radiusX = dist(ovalStartPoint.x, 0, mouseX, 0);
                float radiusY = dist(0, ovalStartPoint.y, 0, mouseY);
                ellipse(ovalStartPoint.x, ovalStartPoint.y, radiusX, radiusY);
                // ellipse(ovalStartPoint.x, ovalStartPoint.y, mouseX, mouseY);
                // Revert to final Colour
                stroke(colourOptions[editorColourIndex]);
              }
          }
        }
      }  
    }
    
    // Tutorial: Undo
    else if(appState == 7) {
      if(mouseButton == LEFT){
        // - Draw on drawing area: drawDrawArea(32, 181, 559, 365);
        if(mouseX >= 32 && mouseY >= 181 && mouseX <= 559 && mouseY <= 365) {
         // Set stroke colour and weight for a shape still being drawn
          if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
          if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; } 
          
          // For shape: free-form line 
          if(editorShapeIndex == 0){
            currentDrawnShape.stroke(strokeColour);
            currentDrawnShape.strokeWeight(strokeWeight);
            currentDrawnShape.vertex(mouseX, mouseY);
            
            // Preview with Alpha
            currentDrawnShape.stroke(colourOptionsAlpha[editorColourIndex]);
            shape(currentDrawnShape);
            // Revert to final Colour
            currentDrawnShape.stroke(colourOptions[editorColourIndex]);
          }
          
          // For shape: straight line
          else if(editorShapeIndex == 1){
            currentDrawnShape.stroke(strokeColour);
            currentDrawnShape.strokeWeight(strokeWeight);
   
            // Guard clause
            if(currentDrawnShape.getVertexCount() == 1){
                // Debug
                PVector startVertex = currentDrawnShape.getVertex(0);
                
                // Preview with Alpha
                stroke(colourOptionsAlpha[editorColourIndex]);
                strokeWeight(strokeWeight);
                line(startVertex.x, startVertex.y, mouseX, mouseY);
                // Revert to final Colour
                stroke(colourOptions[editorColourIndex]);
             }
            
          }
          
          // For shape: rectangle
          else if(editorShapeIndex == 2){
              
              // Preview with Alpha
              stroke(colourOptionsAlpha[editorColourIndex]);
              strokeWeight(strokeWeight);
              fill(defaultShapeFillColour);
              rect(rectangleStartPoint.x, rectangleStartPoint.y, mouseX, mouseY);
              // Revert to final Colour
              stroke(colourOptions[editorColourIndex]);
             
            
          }
          
          // For shape: Oval
          else if(editorShapeIndex == 3){
              // Preview with Alpha
              stroke(colourOptionsAlpha[editorColourIndex]);
              strokeWeight(strokeWeight);
              fill(defaultShapeFillColour);
              float radiusX = dist(ovalStartPoint.x, 0, mouseX, 0);
              float radiusY = dist(0, ovalStartPoint.y, 0, mouseY);
              ellipse(ovalStartPoint.x, ovalStartPoint.y, radiusX, radiusY);
              // ellipse(ovalStartPoint.x, ovalStartPoint.y, mouseX, mouseY);
              // Revert to final Colour
              stroke(colourOptions[editorColourIndex]);
             
            
          }
          
        }
      }
      
    }
    
    // Drawing task 1
    else if(appState == 9) {
      if(mouseButton == LEFT){
        // - Draw on drawing area: drawDrawArea(32, 98, 559, 365);
        if(mouseX >= 32 && mouseY >= 98 && mouseX <= 559 && mouseY <= 365) {
         // Set stroke colour and weight for a shape still being drawn
          if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
          if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; } 
          
          // For shape: free-form line 
          if(editorShapeIndex == 0){
            currentDrawnShape.stroke(strokeColour);
            currentDrawnShape.strokeWeight(strokeWeight);
            currentDrawnShape.vertex(mouseX, mouseY);
            
            // Preview with Alpha
            currentDrawnShape.stroke(colourOptionsAlpha[editorColourIndex]);
            shape(currentDrawnShape);
            // Revert to final Colour
            currentDrawnShape.stroke(colourOptions[editorColourIndex]);
          }
          
          // For shape: straight line
          else if(editorShapeIndex == 1){
            currentDrawnShape.stroke(strokeColour);
            currentDrawnShape.strokeWeight(strokeWeight);
   
            // Guard clause
            if(currentDrawnShape.getVertexCount() == 1){
                // Debug
                PVector startVertex = currentDrawnShape.getVertex(0);
                
                // Preview with Alpha
                stroke(colourOptionsAlpha[editorColourIndex]);
                strokeWeight(strokeWeight);
                line(startVertex.x, startVertex.y, mouseX, mouseY);
                // Revert to final Colour
                stroke(colourOptions[editorColourIndex]);
             }
            
          }
          
          // For shape: rectangle
          else if(editorShapeIndex == 2){
              
              // Preview with Alpha
              stroke(colourOptionsAlpha[editorColourIndex]);
              strokeWeight(strokeWeight);
              fill(defaultShapeFillColour);
              rect(rectangleStartPoint.x, rectangleStartPoint.y, mouseX, mouseY);
              // Revert to final Colour
              stroke(colourOptions[editorColourIndex]);
             
            
          }
          
          // For shape: Oval
          else if(editorShapeIndex == 3){
              // Preview with Alpha
              stroke(colourOptionsAlpha[editorColourIndex]);
              strokeWeight(strokeWeight);
              fill(defaultShapeFillColour);
              float radiusX = dist(ovalStartPoint.x, 0, mouseX, 0);
              float radiusY = dist(0, ovalStartPoint.y, 0, mouseY);
              ellipse(ovalStartPoint.x, ovalStartPoint.y, radiusX, radiusY);
              // ellipse(ovalStartPoint.x, ovalStartPoint.y, mouseX, mouseY);
              // Revert to final Colour
              stroke(colourOptions[editorColourIndex]);
             
            
          }
          
        }
      }
      
    }
    
    // Drawing task 2
    else if(appState == 10) {
      if(mouseButton == LEFT){
        // - Draw on drawing area: drawDrawArea(32, 98, 559, 365);
        if(mouseX >= 32 && mouseY >= 98 && mouseX <= 559 && mouseY <= 365) {
         // Set stroke colour and weight for a shape still being drawn
          if(editorColourIndex >= 0 && editorColourIndex <= 3) { strokeColour =  colourOptions[editorColourIndex]; } 
          if(editorWeightIndex >= 0 && editorWeightIndex <= 2) { strokeWeight =  weightOptions[editorWeightIndex]; } 
          
          // For shape: free-form line 
          if(editorShapeIndex == 0){
            currentDrawnShape.stroke(strokeColour);
            currentDrawnShape.strokeWeight(strokeWeight);
            currentDrawnShape.vertex(mouseX, mouseY);
            
            // Preview with Alpha
            currentDrawnShape.stroke(colourOptionsAlpha[editorColourIndex]);
            shape(currentDrawnShape);
            // Revert to final Colour
            currentDrawnShape.stroke(colourOptions[editorColourIndex]);
          }
          
          // For shape: straight line
          else if(editorShapeIndex == 1){
            currentDrawnShape.stroke(strokeColour);
            currentDrawnShape.strokeWeight(strokeWeight);
   
            // Guard clause
            if(currentDrawnShape.getVertexCount() == 1){
                // Debug
                PVector startVertex = currentDrawnShape.getVertex(0);
                
                // Preview with Alpha
                stroke(colourOptionsAlpha[editorColourIndex]);
                strokeWeight(strokeWeight);
                line(startVertex.x, startVertex.y, mouseX, mouseY);
                // Revert to final Colour
                stroke(colourOptions[editorColourIndex]);
             }
            
          }
          
          // For shape: rectangle
          else if(editorShapeIndex == 2){
              
              // Preview with Alpha
              stroke(colourOptionsAlpha[editorColourIndex]);
              strokeWeight(strokeWeight);
              fill(defaultShapeFillColour);
              rect(rectangleStartPoint.x, rectangleStartPoint.y, mouseX, mouseY);
              // Revert to final Colour
              stroke(colourOptions[editorColourIndex]);
             
            
          }
          
          // For shape: Oval
          else if(editorShapeIndex == 3){
              // Preview with Alpha
              stroke(colourOptionsAlpha[editorColourIndex]);
              strokeWeight(strokeWeight);
              fill(defaultShapeFillColour);
              float radiusX = dist(ovalStartPoint.x, 0, mouseX, 0);
              float radiusY = dist(0, ovalStartPoint.y, 0, mouseY);
              ellipse(ovalStartPoint.x, ovalStartPoint.y, radiusX, radiusY);
              // ellipse(ovalStartPoint.x, ovalStartPoint.y, mouseX, mouseY);
              // Revert to final Colour
              stroke(colourOptions[editorColourIndex]);
             
            
          }
          
        }
      }
      
    }
  }
}

// Mouse Released 
void mouseReleased(){
  
  if(mouseButton == RIGHT){
    // For detection
    one.check();
  }
  
  //Keeping drawing separate
  
  else if(mouseButton == LEFT) {
    // for Start screen   
    if(appState == 0) {
    }
    // Tutorial: Free-form line and beyond
    else if(appState >= 1) {
      if(mouseButton == LEFT){
        
        // Guard clauses
        // TODO: Need to refine the bounding box
        if(editorShapeIndex >= 0 && editorShapeIndex <= 3 && (mouseX >= 32 && mouseY >= 98 && mouseX <= 559 && mouseY <= 365)){
          
          // Freeze the free-form line so far
          if((appState == 1 || appState == 7 || appState == 9 || appState == 10) && editorShapeIndex == 0 && editorColourIndex >=0 && editorWeightIndex >=0) {
            // When left button is released, last shape is complete
            currentDrawnShape.endShape();
            // println("Free-form line shape ended");
            
            // Add to saved list of Shapes 
            drawnShapeList.add(currentDrawnShape);
            
            // Book-keeping
            shapesDrawnLast += 1;
          }
          
          // Add the last vertex for editorShapeIndex: 1 (straight-line)
          else if( (appState == 2 || appState == 7 || appState == 9 || appState == 10) && editorShapeIndex == 1 && editorColourIndex >=0 && editorWeightIndex >=0) {
            currentDrawnShape.vertex(mouseX, mouseY);
            // When left button is released, last shape is complete
            currentDrawnShape.endShape();
            // println("Straight line shape ended");
            
            // Add to saved list of Shapes 
            drawnShapeList.add(currentDrawnShape);
            
            // Book-keeping
            shapesDrawnLast += 1;
          }
           
          // Construct full rectangle for editorShapeIndex: 2 (rectangle)
          else if((appState == 3 || appState == 5 || appState == 7 || appState == 9 || appState == 10) && editorShapeIndex == 2 && editorColourIndex >=0 && editorWeightIndex >=0) {
            // println("Creating new rectangle shape with: ", rectangleStartPoint.x, rectangleStartPoint.y, mouseX, mouseY);
            
            stroke(strokeColour);
            strokeWeight(strokeWeight);
            fill(defaultShapeFillColour);
            currentRectangleShape = createShape(RECT, rectangleStartPoint.x, rectangleStartPoint.y, mouseX, mouseY);
            
            // Add to saved list of Shapes 
            drawnShapeList.add(currentRectangleShape);
            
            // Book-keeping
            shapesDrawnLast += 1;
          }
          
          // Construct full oval for editorShapeIndex: 3 (oval)
          else if( (appState == 4 || appState == 6 || appState == 7 || appState == 9 || appState == 10) && editorShapeIndex == 3 && editorColourIndex >=0 && editorWeightIndex >=0) {
            // println("Creating new oval shape with: ", ovalStartPoint.x, ovalStartPoint.y, mouseX, mouseY);
            
            stroke(strokeColour);
            strokeWeight(strokeWeight);
            fill(defaultShapeFillColour);
            float radiusX = dist(ovalStartPoint.x, 0, mouseX, 0);
            float radiusY = dist(0, ovalStartPoint.y, 0, mouseY);
            currentOvalShape = createShape(ELLIPSE, ovalStartPoint.x, ovalStartPoint.y, radiusX, radiusY);
            
            // Add to saved list of Shapes 
            drawnShapeList.add(currentOvalShape);
            
            // Book-keeping
            shapesDrawnLast += 1;
          }
          
          
          // Re-initialise for Free-form line and Straight line
          if((appState == 1 || appState == 7 || appState == 9 || appState == 10) && editorShapeIndex == 0) {
            // println("Begin new free-form line shape");
            currentDrawnShape = createShape();    
            currentDrawnShape.setFill(defaultShapeFillColour);
            
            currentDrawnShape.beginShape();
            currentDrawnShape.stroke(strokeColour);
            currentDrawnShape.strokeWeight(strokeWeight);
          }
          
          else if((appState == 2 || appState == 7 || appState == 9 || appState == 10) && editorShapeIndex == 1) {
            // println("Begin new straight line shape");
            currentDrawnShape = createShape();    
            currentDrawnShape.setFill(defaultShapeFillColour);
            
            currentDrawnShape.beginShape();
            currentDrawnShape.stroke(strokeColour);
            currentDrawnShape.strokeWeight(strokeWeight);
          }
          
          // Debug
          // println("No. of shapes drawn so far: ", drawnShapeList.size());
        }
      }
    }
  }
}





// ----  Screen UI follows ----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Tutorial: Selecting and drawing straight line with a shortcut key 
void tutorialShortcutStraightlineScreen() {
  background(screenBgColour);
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Tutorial: Draw Straight line", 32, 58);
  
  // Check if selection task if free-form line selected
  if(editorShapeIndex == 1){
    tutStraightSelectedShortcut = true;
  }
  // Then draw circle
  if(tutStraightSelectedShortcut){
    image(checkCircleGreenImage, 32, 74, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Right click and drag a vertical line to select “Straight line”", 58, 90);
  
  
  // Check if a single object has been drawn
  if(drawnShapeList.size() > 0){
    tutStraightDrawnShortcut = true;
  }
  // Then draw circle
  if(tutStraightDrawnShortcut){
    image(checkCircleGreenImage, 32, 104, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Left click and drag the pointer to draw", 58, 121);
  
  textFont(captionPFont);
  text("Drawing area", 32, 171);
  
  // Drawing area
  drawDrawArea(32, 181, 559, 365);

  // Display all the drawn shapes
  for(PShape drawnPShape : drawnShapeList){
    drawnPShape.setFill(defaultShapeFillColour);
    shape(drawnPShape);
  }
  
  fill(textDefaultColour);
  textFont(captionPFont);
  text("Current settings", 576, 171);
  
  // Editor status area 
  drawCurrentSettings(575, 181, true, false, false);
  
  
  noStroke();
  
  // Check if tutorial tasks are done 
  if( tutStraightSelectedShortcut && tutStraightDrawnShortcut && !buttonNextTutorialShortcutRectangleActivated) {    
    buttonNextTutorialShortcutRectangleBgColour = buttonPrimaryDefaultBgColour;
    
    // Change colour only once, so Hover and Pressed state can work
    buttonNextTutorialShortcutRectangleActivated = true;
  }
  
  fill(buttonNextTutorialShortcutRectangleBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Rectangle", 141, 404);
}

// Tutorial: Selecting and drawing Rectangle with a shortcut key 
void tutorialShortcutRectangleScreen() {
  background(screenBgColour);
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Tutorial: Draw Rectangle", 32, 58);
  
  // Check if selection task if free-form line selected
  if(editorShapeIndex == 2){
    tutRectangleSelectedShortcut = true;
  }
  // Then draw circle
  if(tutRectangleSelectedShortcut){
    image(checkCircleGreenImage, 32, 74, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Right click and draw a rectangle from top right corner", 58, 90);
  
  
  // Check if a single object has been drawn
  if(drawnShapeList.size() > 0){
    tutRectangleDrawnShortcut = true;
  }
  // Then draw circle
  if(tutRectangleDrawnShortcut){
    image(checkCircleGreenImage, 32, 104, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Left click and drag the pointer to draw from top-left corner to bottom-right corner", 58, 121);
  
  textFont(captionPFont);
  text("Drawing area", 32, 171);
  
  // Drawing area
  drawDrawArea(32, 181, 559, 365);

  // Display all the drawn shapes
  for(PShape drawnPShape : drawnShapeList){
    drawnPShape.setFill(defaultShapeFillColour);
    shape(drawnPShape);
  }
  
  fill(textDefaultColour);
  textFont(captionPFont);
  text("Current settings", 576, 171);
  
  // Editor status area 
  drawCurrentSettings(575, 181, true, false, false);
  
  
  noStroke();
  
  // Check if tutorial tasks are done 
  if( tutRectangleSelectedShortcut && tutRectangleDrawnShortcut && !buttonNextTutorialShortcutOvalActivated) {    
    buttonNextTutorialShortcutOvalBgColour = buttonPrimaryDefaultBgColour;
    
    // Change colour only once, so Hover and Pressed state can work
    buttonNextTutorialShortcutOvalActivated = true;
  }
  
  fill(buttonNextTutorialShortcutOvalBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Oval", 161, 404);
}


// Tutorial: Selecting and drawing Oval with a shortcut key 
void tutorialShortcutOvalScreen() {
  background(screenBgColour);
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Tutorial: Draw Oval", 32, 58);
  
  // Check if selection task if free-form line selected
  if(editorShapeIndex == 3){
    tutOvalSelectedShortcut = true;
  }
  // Then draw circle
  if(tutOvalSelectedShortcut){
    image(checkCircleGreenImage, 32, 74, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Right click and draw a circle", 58, 90);
  
  
  // Check if a single object has been drawn
  if(drawnShapeList.size() > 0){
    tutOvalDrawnShortcut = true;
  }
  // Then draw circle
  if(tutOvalDrawnShortcut){
    image(checkCircleGreenImage, 32, 104, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Left click and drag the pointer to draw from top-left corner to bottom-right corner", 58, 121);
  
  textFont(captionPFont);
  text("Drawing area", 32, 171);
  
  // Drawing area
  drawDrawArea(32, 181, 559, 365);

  // Display all the drawn shapes
  for(PShape drawnPShape : drawnShapeList){
    drawnPShape.setFill(defaultShapeFillColour);
    shape(drawnPShape);
  }
  
  fill(textDefaultColour);
  textFont(captionPFont);
  text("Current settings", 576, 171);
  
  // Editor status area 
  drawCurrentSettings(575, 181, true, false, false);
  

  
  noStroke();
  
  // Check if tutorial tasks are done 
  if( tutOvalSelectedShortcut && tutOvalDrawnShortcut && !buttonNextTutorialShortcutColourActivated) {    
    buttonNextTutorialShortcutColourBgColour = buttonPrimaryDefaultBgColour;
    
    // Change colour only once, so Hover and Pressed state can work
    buttonNextTutorialShortcutColourActivated = true;
  }
  
  fill(buttonNextTutorialShortcutColourBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Colours", 149, 404);
}



// Tutorial: Selecting colours and drawing with each using shortcut key 
void tutorialShortcutColoursScreen() {
  background(screenBgColour);
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Tutorial: Change line colours", 32, 58);
  
  if(editorColourIndex == 0 && !tutColour1SelectedShortcut) { tutColour1SelectedShortcut = true; }
  if(editorColourIndex == 1 && !tutColour2SelectedShortcut) { tutColour2SelectedShortcut = true; }
  if(editorColourIndex == 2 && !tutColour3SelectedShortcut) { tutColour3SelectedShortcut = true; }
  if(editorColourIndex == 3 && !tutColour4SelectedShortcut) { tutColour4SelectedShortcut = true; }
  
  
  // Check if selection task if free-form line selected
  if(tutColour1SelectedShortcut && tutColour2SelectedShortcut && tutColour3SelectedShortcut && tutColour4SelectedShortcut){
    tutAllColoursSelectedShortcut = true;
  }
  // Then draw circle
  if(tutAllColoursSelectedShortcut){
    image(checkCircleGreenImage, 32, 74, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Right click and draw", 58, 90);
  image(gestureBlackColourSelectImage, 249, 72, 70, 40);
  image(gestureRedColourSelectImage, 349, 72, 67, 40);
  image(gestureGreenColourSelectImage, 446, 72, 92, 40);
  image(gestureBlueColourSelectImage, 568, 72, 95, 40);
  
  // Check if at least one shape with each colour has been drawn
  if(tutColour1DrawnShortcut && tutColour2DrawnShortcut && tutColour3DrawnShortcut && tutColour4DrawnShortcut){
    tutDrawnWithAllColoursShortcut = true;
  }
  // Then draw circle
  if(tutDrawnWithAllColoursShortcut){
    image(checkCircleGreenImage, 32, 122, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Draw one rectangle of each colour", 58, 139);
  
  textFont(captionPFont);
  text("Drawing area", 32, 171);
  
  // Drawing area
  drawDrawArea(32, 181, 559, 365);


  // Display all the drawn shapes
  for(PShape drawnPShape : drawnShapeList){
    drawnPShape.setFill(defaultShapeFillColour);
    shape(drawnPShape);
    
    // Check if each colour is used
    if(drawnPShape.getStroke(0) == colourOptions[0]) { tutColour1DrawnShortcut = true; }
    if(drawnPShape.getStroke(0) == colourOptions[1]) { tutColour2DrawnShortcut = true; }
    if(drawnPShape.getStroke(0) == colourOptions[2]) { tutColour3DrawnShortcut = true; }
    if(drawnPShape.getStroke(0) == colourOptions[3]) { tutColour4DrawnShortcut = true; }
  }
  
  fill(textDefaultColour);
  textFont(captionPFont);
  text("Current settings", 576, 171);
  
  // Editor status area 
  drawCurrentSettings(575, 181, false, true, false);
  
  
  noStroke();
  
  // Check if tutorial tasks are done 
  if( tutAllColoursSelectedShortcut && tutDrawnWithAllColoursShortcut && !buttonNextTutorialShortcutWeightActivated) {    
    buttonNextTutorialShortcutWeightBgColour = buttonPrimaryDefaultBgColour;
    
    // Change colour only once, so Hover and Pressed state can work
    buttonNextTutorialShortcutWeightActivated = true;
  }
  
  fill(buttonNextTutorialShortcutWeightBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Weights", 148, 404);
}


// Tutorial: Selecting weights and drawing with each using shortcut key 
void tutorialShortcutWeightsScreen() {
  background(screenBgColour);
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Tutorial: Change line weights", 32, 58);
  
  
  if(editorWeightIndex == 0 && !tutWeight1SelectedShortcut) { tutWeight1SelectedShortcut = true; }
  if(editorWeightIndex == 1 && !tutWeight2SelectedShortcut) { tutWeight2SelectedShortcut = true; }
  if(editorWeightIndex == 2 && !tutWeight3SelectedShortcut) { tutWeight3SelectedShortcut = true; }

  
  // Check if selection task of all line weights are done
  if(tutWeight1SelectedShortcut && tutWeight2SelectedShortcut && tutWeight3SelectedShortcut ){
    tutAllWeightsSelectedShortcut = true;
  }
  // Then draw circle
  if(tutAllWeightsSelectedShortcut){
    image(checkCircleGreenImage, 32, 74, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Right click and draw", 58, 90);
  
  image(gestureThinWeightSelectImage, 243, 72, 63, 28);
  image(gestureMediumWeightSelectImage, 347, 72, 98, 55);
  image(gestureThickWeightSelectImage, 487, 72, 71, 82);
  
  // Check if at least one shape with each weight has been drawn
  if(tutWeight1DrawnShortcut && tutWeight2DrawnShortcut && tutWeight3DrawnShortcut){
    tutDrawnWithAllWeightsShortcut = true;
  }
  // Then draw circle
  if(tutDrawnWithAllWeightsShortcut){
    image(checkCircleGreenImage, 32, 122, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Draw one oval of each weight", 58, 139);
  
  textFont(captionPFont);
  text("Drawing area", 32, 171);
  
  // Drawing area
  drawDrawArea(32, 181, 559, 365);


  // Display all the drawn shapes
  for(PShape drawnPShape : drawnShapeList){
    drawnPShape.setFill(defaultShapeFillColour);
    shape(drawnPShape);
    
    // Check if each weight is used
    if(drawnPShape.getStrokeWeight(0) == (float) weightOptions[0]) { tutWeight1DrawnShortcut = true; }
    if(drawnPShape.getStrokeWeight(0) == (float) weightOptions[1]) { tutWeight2DrawnShortcut = true; }
    if(drawnPShape.getStrokeWeight(0) == (float) weightOptions[2]) { tutWeight3DrawnShortcut = true; }
  }
  
  fill(textDefaultColour);
  textFont(captionPFont);
  text("Current settings", 576, 171);
  
  // Editor status area 
  drawCurrentSettings(575, 181, false, false, true);

  
  
  noStroke();
  
  // Check if tutorial tasks are done 
  if( tutAllWeightsSelectedShortcut && tutDrawnWithAllWeightsShortcut && !buttonNextTutorialShortcutUndoActivated) {    
    buttonNextTutorialShortcutUndoBgColour = buttonPrimaryDefaultBgColour;
    
    // Change colour only once, so Hover and Pressed state can work
    buttonNextTutorialShortcutUndoActivated = true;
  }
  
  fill(buttonNextTutorialShortcutUndoBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Undo", 158, 404);
}

// Tutorial: Undo
void tutorialShortcutUndoScreen() {
  background(screenBgColour);
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Tutorial: Undo", 32, 58);
  
  // Check if three shapes have been drawn
  if(drawnShapeList.size() == 3){
    tut3ShapesDrawnShortcut = true;
  }
  // Then draw circle
  if(tut3ShapesDrawnShortcut){
    image(checkCircleGreenImage, 32, 74, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Draw at least 3 shapes", 58, 90);
  
  
  // Check if a three shapes have been deleated
  if(drawnShapeList.size() == 0 && tut3ShapesDrawnShortcut){
    tut3DeletedShortcut = true;
  }
  // Then draw circle
  if(tut3DeletedShortcut){
    image(checkCircleGreenImage, 32, 104, 18, 18);
  }
  textFont(defaultCopyPFont);
  text("Right click and draw a “<” (less-than sign) to undo back to blank drawing area", 58, 121);
  
  textFont(captionPFont);
  text("Drawing area", 32, 171);
  
  // Drawing area
  drawDrawArea(32, 181, 559, 365);

  // Display all the drawn shapes
  for(PShape drawnPShape : drawnShapeList){
    drawnPShape.setFill(defaultShapeFillColour);
    shape(drawnPShape);
  }
  
  fill(textDefaultColour);
  textFont(captionPFont);
  text("Current settings", 576, 171);
  
  // Editor status area 
  drawCurrentSettings(575, 181, true, true, true);

  
  noStroke();
  
  // Check if tutorial tasks are done 
  if( tut3ShapesDrawnShortcut && tut3DeletedShortcut && !buttonNextTutorialShortcutReviewActivated) {    
    buttonNextTutorialShortcutReviewBgColour = buttonPrimaryDefaultBgColour;
    
    // Change colour only once, so Hover and Pressed state can work
    buttonNextTutorialShortcutReviewActivated = true;
  }
  
  fill(buttonNextTutorialShortcutReviewBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Review", 151, 404);
}

// Review Keyboard Shortcuts Screen
void reviewKeyboardShortcutsScreen() {
  
  background(screenBgColour);
  
  // Draw vertical separators 
  stroke(defaultBorderColour);
  strokeWeight(defaultBorderWeight);
  line(338, 94, 339, 199);
 
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Review: All Gestures are performed with Right Click", 32, 58);
  
  // All Explanations
  textFont(defaultCopyPFont);
  text("Right Click", 161, 112);
  text("Draw vertical line", 161, 140);
  text("Draw rectangle", 161, 168);
  text("Draw oval", 161, 196);
  
  text("Draw the shapes below to select weights", 379, 112);
  image(gestureThinWeightSelectImage, 379, 123, 63, 28);
  image(gestureMediumWeightSelectImage, 489, 123, 98, 55);
  image(gestureThickWeightSelectImage, 634, 123, 71, 82);
  
  text("Draw the shapes below to select colours", 32, 244);
  image(gestureBlackColourSelectImage, 32, 262, 70, 40);
  image(gestureRedColourSelectImage, 132, 262, 67, 40);
  image(gestureGreenColourSelectImage, 229, 262, 92, 40);
  image(gestureBlueColourSelectImage, 351, 262, 95, 40);
  
  text("Right click and draw a “<” (less-than sign)", 91, 346);
  
  
  // All actions
  textFont(boldCopyPFont);
  text("Free-form line", 32, 112);
  text("Straight line", 32, 140);
  text("Rectangle", 32, 168);
  text("Oval", 32, 196);
  
  text("Undo", 32, 346);
  
  noStroke();
  fill(buttonNextTask1ShortcutBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Drawing Task 1", 122, 404);
  
}

// Drawing task 1: Abstract / Canonical forms
void drawingTask1Screen() {
  background(screenBgColour);
  
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Drawing Task 1", 32, 58);
  
  textFont(defaultCopyPFont);
  text("Draw a tree and move on to the next task", 228, 57);
  
  textFont(captionPFont);
  text("Drawing area", 32, 88);
  
  // Drawing area
  drawDrawArea(32, 98, 559, 365); 
  
  // Display all the drawn shapes
  for(PShape drawnPShape : drawnShapeList){
    drawnPShape.setFill(defaultShapeFillColour);
    shape(drawnPShape);
  }
  
  fill(textDefaultColour);
  textFont(captionPFont);
  text("Current settings", 576, 88);
  
  // Editor status area 
  drawCurrentSettings(575, 98, true, true, true);

  noStroke();
  fill(buttonNextTask2ShortcutBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Drawing Task 2", 122, 404);
  
}

// Drawing task 2: Drawing known form
void drawingTask2Screen() {
  background(screenBgColour);
  
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Drawing Task 2", 32, 58);
  
  textFont(defaultCopyPFont);
  text("Draw a flow diagram of a conditional statement", 228, 57);
  
  textFont(captionPFont);
  text("Drawing area", 32, 88);
  
  // Drawing area
  drawDrawArea(32, 98, 559, 365); 
  
  // Display all the drawn shapes
  for(PShape drawnPShape : drawnShapeList){
    drawnPShape.setFill(defaultShapeFillColour);
    shape(drawnPShape);
  }
  
  fill(textDefaultColour);
  textFont(captionPFont);
  text("Current settings", 576, 88);
  
  // Editor status area 
  drawCurrentSettings(575, 98, true, true, true);

  noStroke();
  fill(buttonNextConclusionShortcutBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Next: Conclude", 143, 404);
  
}

// Concluding screen: Appreciate and ask for outputs
void endingScreen() {
  
  background(screenBgColour);
 
  fill(textDefaultColour);
  textFont(headerPFont);
  text("Thank you for participating in the assignment!", 32, 58);
  
  textFont(defaultCopyPFont);
  text("Please copy the generated outputs and send it to us via Teams or Email", 32, 112);
  
  noStroke();
  fill(buttonExitBgColour);
  rect(32, 381, 362, 417, 4);
  
  fill(textButtonPrimaryLabelColour);
  textFont(buttonLabelPFont);
  text("Exit", 184, 404);
  
}
